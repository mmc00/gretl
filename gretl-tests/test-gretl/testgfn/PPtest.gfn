<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="PPtest" ID="1427126463" needs-time-series-data="true" minver="1.9.9">
<author email="r.lucchetti@univpm.it">Riccardo &quot;Jack&quot; Lucchetti</author>
<version>0.1</version>
<date>2012-08-23</date>
<description>Phillips-Perron test</description>
<label>Phillips-Perron test</label>
<menu-attachment>MAINWIN/Variable/URTests</menu-attachment>
<help>
This package implements the Phillips-Perron unit root test.
The parameters are as follows

y        : The series to test for stationarity

ct       : Deterministic terms (0 = none, 1 = constant only, 
           2 = constant + trend)

bartlett : The number of lags in the nonparametric correction to the
           long-run variance. Default = floor(4*(T/100)^(2/9)). The
           default is used if the bartlett argument is omitted or
           is non-positive.

verbose  : The output verbosity (0 to 3). The default is 1.
</help>
<gretl-function name="PPtest" type="matrix">
 <params count="4">
  <param name="y" type="series">
<description>series to test</description>
  </param>
  <param name="ct" type="int" min="0" max="2" default="1">
<description>deterministic term(s)</description>
<labels count="3">
"none" "constant" "constant + trend" </labels>
  </param>
  <param name="bartlett" type="int" min="0" default="0">
<description>Bartlett window size</description>
  </param>
  <param name="verbose" type="int" min="0" max="3" default="1">
<description>verbosity</description>
  </param>
 </params>
<code>string yname
string xnames
list X
if ct==1
  X = const
  xnames = &quot;const &quot;
elif ct==2
  X = const time
  xnames = &quot;const time &quot;
endif
X += y(-1)
# do the actual calculation
ols y X --quiet
scalar k     = $ncoeff
rho          = $coeff[k]
se           = $stderr[k]
series u     = $uhat
scalar T     = $T
scalar s2    = $sigma^2
scalar tau   = (rho-1)/se
scalar Trat  = T * se/$sigma
scalar m     = (bartlett&gt;0) ? bartlett : floor(4*($T/100)^(2/9))
scalar lambda2 = lrvar(u,m)
scalar gamma0  = mean(u^2)
scalar dif     = lambda2 - gamma0
scalar Z_tau = sqrt(gamma0/lambda2) * tau - 0.5 * (dif * Trat) / sqrt(lambda2)
scalar pval  = urcpval(Z_tau, T, 1, ct+1)
if verbose &gt; 0
  yname = argname(y)
  if verbose &gt; 1
    printf &quot;\n&quot;
  endif
  if strlen(yname) &gt; 0
    printf &quot;Phillips-Perron unit-root test for %s, &quot;, yname
  else
    yname = &quot;y&quot;
    printf &quot;Phillips-Perron unit-root test, &quot;
  endif
  printf &quot;Bartlett bandwidth %g:\n&quot;, m
  if verbose &gt; 1
    printf &quot;\n&quot;
  endif
  printf &quot;Z_t = %g (p-value = %6.4f)\n&quot;, Z_tau, pval
endif
if verbose &gt; 1
  matrix b = $coeff ~ $stderr
  printf &quot;\nTest regression (OLS, dependent variable %s, T = %d):\n&quot;, yname, $T
  xnames += &quot;@yname(-1)&quot;
  modprint b xnames
  printf &quot;Sample variance of residual       %g\n&quot;, s2
  printf &quot;Estimated long-run error variance %g\n\n&quot;, lambda2
endif
if verbose &gt; 2
  scalar Z_rho = T*(rho-1) - 0.5 * Trat^2 * dif
  printf &quot;Alternate test statistic: Z_rho = %g\n&quot;, Z_rho
endif
matrix ret = { Z_tau, pval }
colnames(ret, &quot;Z_tau pval&quot;)
return ret
</code>
</gretl-function>
<gretl-function name="GUI_PP" type="void" menu-only="1" pkg-role="gui-main">
 <params count="4">
  <param name="y" type="series">
<description>series to test</description>
  </param>
  <param name="ct" type="int" min="0" max="2" default="1">
<description>deterministic term(s)</description>
<labels count="3">
"none" "constant" "constant + trend" </labels>
  </param>
  <param name="bartlett" type="int" min="0" default="0">
<description>Bartlett window size (0 = automatic)</description>
  </param>
  <param name="verbose" type="bool" default="1"/>
 </params>
<code>scalar v = verbose ? 2 : 1
string yname = argname(y)
if strlen(yname) &gt; 0 &amp;&amp; yname != &quot;y&quot;
  series @yname = y
  PPtest(@yname, ct, bartlett, v)
else
  PPtest(y, ct, bartlett, v)
endif
</code>
</gretl-function>
<sample-script>
include PPtest.gfn

nulldata 169
setobs 4 1947:1
open fedstl.bin
data gdpc96
series y = 100*log(gdpc96)

scalar c = 1  # constant
scalar ct = 2 # constant + trend

# Bartlett bandwidth
scalar m = 0  # use the default

# Test:
ptest = PPtest(y, ct, m, 0) # no printed output
print ptest
PPtest(y, ct, m, 1)         # prints the PP test
PPtest(y, ct, m, 2)         # prints the test + the regression
</sample-script>
</gretl-function-package>
</gretl-functions>

