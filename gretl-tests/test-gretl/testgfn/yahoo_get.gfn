<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="yahoo_get" ID="1418398253" needs-time-series-data="true" minver="1.9.92">
<author email="r.lucchetti@univpm.it">Riccardo &quot;Jack&quot; Lucchetti</author>
<version>1.17</version>
<date>2015-07-02</date>
<description>Downloader of daily financial data from Yahoo</description>
<label>Yahoo download</label>
<menu-attachment>MAINWIN/Data</menu-attachment>
<help>
This package is meant to make it easy to download daily data from 
finance.yahoo.com. In order to have it working, a daily dataset must 
already be open when calling the three functions contained here:

* yahoo_price: simple importer. It requires a string parameter with
  the ticker (to look up for tickers, go to
  http://finance.yahoo.com/lookup) and returns the adjusted price as a
  series. A second, optional parameter can be used to specify a method
  for filling up missing observation (eg July the 4th); see the help
  to the &quot;gap_filler&quot; function.

* yahoo_full: It requires a parameter with the ticker string and
  fetches the canonical set of available series (volume, open/close,
  hi/lo, adjusted) as a list.

* yahoo_dividends: It requires a parameter with the ticker string and
  fetches the series of dividends for that ticker.

* gap_filler: simple convenience function to crudely get rid of
  missing values interspersed between valid observations. Accepts a
  scalar parameter between 0 and 2, whose meaning is:
  0: do nothing, leave the gaps;
  1: NAs are replaced with previous observations;
  2: NAs are replaced with a linear interpolation.
</help>
<gretl-function name="yahoo_full" type="list">
 <params count="1">
  <param name="tck" type="string">
<description>Ticker</description>
  </param>
 </params>
<code>scalar err = 0
string FNM = write_tempfile(tck, &amp;err, &quot;d&quot;)
list ret = null
if err==404
  printf &quot;Ticker %s not found [%s]\n&quot;, tck, FNM
elif err&gt;0
  printf &quot;Data download failed\n&quot;
else
  string ftck = fixname(tck)
  join &quot;@FNM&quot; @ftck_ac --tkey=Date --data=&quot;Adj_Close&quot;
  setinfo @ftck_ac --description=&quot;Adjusted close for @tck&quot;
  join &quot;@FNM&quot; @ftck_o --tkey=Date --data=&quot;Open&quot;
  setinfo @ftck_o --description=&quot;Open price for @tck&quot;
  join &quot;@FNM&quot; @ftck_c --tkey=Date --data=&quot;Close&quot;
  setinfo @ftck_c --description=&quot;Close price for @tck&quot;
  join &quot;@FNM&quot; @ftck_l --tkey=Date --data=&quot;Low&quot;
  setinfo @ftck_l --description=&quot;Low for @tck&quot;
  join &quot;@FNM&quot; @ftck_h --tkey=Date --data=&quot;High&quot;
  setinfo @ftck_h --description=&quot;High for @tck&quot;
  join &quot;@FNM&quot; @ftck_v --tkey=Date --data=&quot;Volume&quot;
  setinfo @ftck_v --description=&quot;Volume for @tck&quot;
  list ret = @ftck_ac @ftck_o @ftck_c @ftck_h @ftck_l @ftck_v
  printf &quot;%s imported ok (full)\n&quot;, tck
  remove(&quot;@FNM&quot;)
endif
return ret
</code>
</gretl-function>
<gretl-function name="gap_filler" type="series">
 <params count="2">
  <param name="x" type="series">
<description>Series to fill</description>
  </param>
  <param name="method" type="int" min="0" max="2" default="0">
<description>Fill method</description>
<labels count="3">
"Don't" "Repetition" "Linear interpolation" </labels>
  </param>
 </params>
<code>string lbl = argname(x)
if method == 0 # do nothing
  series ret = x
elif method == 1 # get previous value
  genr time
  series OK = ok(x)
  series ret = x
  series tmp = OK ? time : NA
  scalar ini = min(tmp)
  scalar fin = max(tmp)
  smpl ini fin
  ret = OK ? x : ret(-1)
  string lbl = sprintf(&quot;gap-filled version of %s (with repetition)&quot;, argname(x))
  setinfo ret --description=&quot;@lbl&quot;
elif method == 2 #interpolate_linearly
  series ret = x
  scalar xt = x[$t1]
  scalar init = $t1
  loop while missing(xt) --quiet
    xt = x[init++]
  endloop
  scalar ini = xt
  scalar fin = NA
  scalar span = 0
  scalar fint = NA
  loop t=$t1+1..$t2 --quiet
    xt = x[t]
    if missing(xt)
      span++
    else
      if span&gt;0
        fin = xt
        fint = t
        scalar dx = (fin - ini)/(span+1)
        loop j=1..span --quiet
          ret[init+j] = ini + dx*j
        endloop
        span = 0
      else
        ini = xt
        ret[t] = xt
      endif
      init = t
    endif
  endloop
  string lbl = sprintf(&quot;gap-filled version of %s (with interpolation)&quot;, argname(x))
  setinfo ret --description=&quot;@lbl&quot;
endif
return ret
</code>
</gretl-function>
<gretl-function name="yahoo_price" type="series">
 <params count="2">
  <param name="ticker" type="string">
<description>Ticker</description>
  </param>
  <param name="method" type="int" min="0" max="2" default="0">
<description>Fill method</description>
<labels count="3">
"Don't" "Repetition" "Linear interpolation" </labels>
  </param>
 </params>
<code>scalar err = 0
string FNM = write_tempfile(ticker, &amp;err, &quot;d&quot;)
series ret = NA
if err==404
  printf &quot;Ticker %s not found\n&quot;, ticker
elif err&gt;0
  printf &quot;Data download failed\n&quot;
else
  join &quot;@FNM&quot; ret --tkey=Date --data=&quot;Adj_Close&quot;
  printf &quot;%s imported ok\n&quot;, ticker
  remove(&quot;@FNM&quot;)
  desc_s = &quot;Adjusted close for @ticker&quot;
  if method==1
    ret = gap_filler(ret, method)
    desc_s ~= &quot; (NAs filled)&quot;
  elif method==2
    ret = gap_filler(ret, method)
    desc_s ~= &quot; (NAs interpolated)&quot;
  endif
  setinfo ret --description=&quot;@desc_s&quot;
endif
return ret
</code>
</gretl-function>
<gretl-function name="yahoo_dividends" type="series">
 <params count="1">
  <param name="ticker" type="string">
<description>Ticker</description>
  </param>
 </params>
<code>scalar err = 0
string FNM = write_tempfile(ticker, &amp;err, &quot;v&quot;)
series ret = NA
if err==404
  printf &quot;Ticker %s not found\n&quot;, ticker
elif err&gt;0
  printf &quot;Data download failed\n&quot;
else
  join &quot;@FNM&quot; ret --tkey=Date --data=&quot;Dividends&quot;
  printf &quot;Dividend deries for %s imported ok\n&quot;, ticker
  remove(&quot;@FNM&quot;)
  ret = misszero(ret)
  setinfo ret --description=&quot;Dividends for @ticker&quot;
endif
return ret
</code>
</gretl-function>
<gretl-function name="build_yahoo_url" type="string" private="1">
 <params count="2">
  <param name="symbol" type="string"/>
  <param name="req" type="string"/>
 </params>
<code>/*
URL example:
http://ichart.finance.yahoo.com/table.csv?s=IBM&amp;d=7&amp;e=6&amp;f=2013&amp;g=d&amp;a=0&amp;b=2&amp;c=1962&amp;ignore=.csv
s = symbol
a = starting month (jan=0)
b = starting day
c = starting year
d = end month (jan=0)
e = end day
f = end year
g = periodicity (d,w,m; v = special for dividends)
(this lives in the parameter &quot;req&quot;)
*/
string WEBSITE = &quot;http://ichart.finance.yahoo.com/table.csv&quot;
series d = $obsmicro
series m = $obsminor
series y = $obsmajor
scalar d0 = d[$t1]
scalar m0 = m[$t1] - 1
scalar y0 = y[$t1]
scalar d1 = d[$t2]
scalar m1 = m[$t2] - 1
scalar y1 = y[$t2]
ret = sprintf(&quot;%s?s=%s&amp;a=%d&amp;b=%d&amp;c=%d&amp;d=%d&amp;e=%d&amp;f=%d&amp;g=%s&amp;ignore=.csv&quot;,   WEBSITE, symbol, m0, d0, y0, m1, d1, y1, req)
return ret
</code>
</gretl-function>
<gretl-function name="write_tempfile" type="string" private="1">
 <params count="3">
  <param name="symbol" type="string"/>
  <param name="err" type="scalarref"/>
  <param name="req" type="string"/>
 </params>
<code>rnd = randgen1(i,1,9999)
if $windows
  fname = sprintf(&quot;%s\\yg_%04d.csv&quot;, toupper(&quot;@dotdir&quot;), rnd)
else
  fname = sprintf(&quot;@dotdir/yg_%04d.csv&quot;, rnd)
endif
URL = build_yahoo_url(symbol, req)
# print URL
catch s = readfile(URL)
err = $error
if !err
  check = strstr(s, &quot;404 Not Found&quot;)
  if strlen(check) &gt; 0
    err = 404
  endif
else
  printf &quot;Error %d!\n&quot;, err
endif
if !err
  s = strsub(s, &quot;Adj Close&quot;, &quot;Adj_Close&quot;)
  outfile &quot;@fname&quot; --write
  print s
  outfile --close
endif
return fname
</code>
</gretl-function>
<sample-script>
include yahoo_get.gfn

# sample function call
nulldata 1800
setobs 5 2008-01-01  # a daily dataset should be already in place

redhat = yahoo_price(&quot;RHT&quot;)  # get Red Hat, adjusted price only 
list L = yahoo_full(&quot;IBM&quot;)   # get IBM, full set of series 
foo    = yahoo_price(&quot;ZZZ&quot;)  # a non-existent ticker will give NAs
msft = yahoo_price(&quot;MSFT&quot;,1)  # get Microsoft, fill gaps by repetition
eni  = yahoo_price(&quot;E&quot;,2)     # get ENI, fill gaps by interpolation

mmm_div = yahoo_dividends(&quot;MMM&quot;) # get dividend series for 3M
</sample-script>
</gretl-function-package>
</gretl-functions>

