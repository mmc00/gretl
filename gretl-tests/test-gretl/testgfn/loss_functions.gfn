<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="loss_functions" ID="1434303008" minver="1.8.4">
<author email="german.villar@alumnos.cide.edu">Germán Villar</author>
<version>1.0</version>
<date>2015-06-14</date>
<description>Loss functions to evaluate out of sample predictions</description>
<help>
Germán Villar Argueta 1.0 2015-05-15 Loss_Functions  This function returns different criteria to evaluate out of sample predictions. Also, there are different types of loss functions to evaluate predictions, given the type of prediction (forecast, asymmetry, probability, interval, etc.). The syntax is the following: Loss_Functions(h, y, yhat, p, d, a), where ‘h’ is forecast horizon; ‘y’ is the observed variable; ‘yhat’ is the predicted variable;’p’ is the probability of occurrence of a turning point at date t;’d’ is a dummy equal to 1 if there is a business cycle turning point (or any defined event)  in period t and 0, otherwise; and ‘a’ is a scalar with a value less than 1/2 associated to the linex function defined in Hwang, Knight &amp; Satchell (1999). Finally, this function returns three types of loss functions arranged in three vectors inside a bundle: Financial Forecast Loss Functions (FFLF), Asymetry Linex Loss Functions (ALLF), and Probability Forecast Loss Functions (PFLF). The first vector, defined as ‘Lfor’, gives us six different FFLF’s defined in Lee(2007); the second vector returns four different ALLF’s defined in Hwang, Knight &amp; Satchel (1999); the third vector returns two PFLF’S defined in Lee(2007). 

--------------–
References

Hwang, S., Knight, J. L., &amp; Satchell, S. (1999). Forecasting volatility using LINEX loss functions. 

Lee T. H., (2007): “Loss Functions in Time series forecasting”, University of California, Riverside, Unpublished working paper
</help>
<gretl-function name="loss_functions" type="bundle">
 <params count="6">
  <param name="h" type="scalar">
<description>prediction horizon</description>
  </param>
  <param name="y" type="series">
<description>observed variable</description>
  </param>
  <param name="yhat" type="series">
<description>prediction of y</description>
  </param>
  <param name="p" type="series">
<description>pdf</description>
  </param>
  <param name="d" type="series">
<description>dummy variable</description>
  </param>
  <param name="a" type="scalar">
<description>a&lt;1/2</description>
  </param>
 </params>
<code>d1 = (yhat/abs(yhat))*(y/abs(y))
genr dum = (d1&gt;0)
#Loss functions for Financial Forecasts
genr MSFEsq = (sum(y*y) + sum(yhat*yhat) -2*sum(y*yhat))/h
genr MSFE = MSFEsq^(1/2)
genr MAFE = sum(abs(yhat-y))/h
genr MAPE = sum(abs((yhat-y)/y))/h
genr MFTR = -sum((yhat/abs(yhat))*y)/h
genr MCFD = -sum(dum)/h
#Loss functions for assymetry (Linex Functions)
genr LCF = ln(2) - ln((gamma(.5-a))/gamma(.5))/a
genr MAFElinex = sum(abs(abs(y)-(yhat*exp(LCF))^(1/2)))/h
genr MSFElinex = sum((abs(y)-(yhat*exp(LCF))^(1/2))^2)/h
genr MALFElinex = sum(abs(ln(y^2)-ln(yhat)-LCF))/h
genr MSLFElinex = sum(abs(ln(y^2)-ln(yhat)-LCF)^2)/h
#Loss functions for probability forecasts
genr QPS = sum(2*(p-d)^2)/h
genr LPS = -sum(ln((p^(d))*(1-p)^(1-d)))/h
matrix LFOR = {MSFEsq, MSFE, MAFE, MAPE, MFTR, MCFD}
colnames(LFOR, &quot;MSFEsq MSFE MAFE MAPE MFTR MCFD&quot;)
matrix LASSYM = {MAFElinex, MSFElinex, MALFElinex, MSLFElinex}
colnames(LASSYM, &quot;MAFElinex MSFElinex MALFElinex MSLFElinex&quot;)
matrix LPF = {QPS, LPS}
colnames(LPF, &quot;QPS LPS&quot;)
bundle LF
LF[&quot;LF_for_Financial_Forecasts&quot;] = LFOR
LF[&quot;LF_for_assymetry&quot;] = LASSYM
LF[&quot;LF_for_probability_forecasts&quot;] = LPF
print LF
print LFOR
print LASSYM
print LPF
return LF
</code>
</gretl-function>
<sample-script>
include loss_functions.gfn

open arma.gdt

d = (u&lt;0)

bundle evaluate = loss_functions(100, y, u, eps, d, .2)
#'a' is a scalar such that a&lt;.5. See Hwang, S., Knight, J. L., &amp; Satchell, S. (1999). 
print evaluate
</sample-script>
</gretl-function-package>
</gretl-functions>

