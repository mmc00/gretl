<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="SETAR" ID="1309192208" needs-time-series-data="true" minver="1.9.5">
<author>Federico Lampis, Ignacio Díaz-Emparanza</author>
<version>1.2</version>
<date>2011-06-27</date>
<description>Estimation of a SETAR model</description>
<help>
This function performs the estimation of a SETAR model on the basis of the asymptotic theory of Hansen (&quot;Sample Splitting and Threshold Estimation&quot;, Econometrica, 2000):

Y_(t)= a1*Y_(t-1)+a2*Y_(t-2)+···+ap*Y_(t-p)(Y_(t-d)&lt;=gamma) +
       b1*Y_(t-1)+b2*Y_(t-2)+···+bp*Y_(t-p)(Y_(t-d)&gt;gamma) + e_(t)

This program makes use of procedures based on GAUSS code of Bruce Hansen to estimate a SETAR model with 2 regimes both under the hypothesis of homoskedasticity and heteroskedasticity. In the last case the error term is supposed to be a Martingale Difference. For both case are also computed:

1) The confidence interval for the threshold parameter
2) The confidence interval for the autoregressive coefficients
3) The test for a threshold in linear regression (Linearity Test)
</help>
<gretl-function name="SETAR" type="list">
 <params count="6">
  <param name="y" type="series">
<description>Dependent Variable</description>
  </param>
  <param name="p" type="scalar">
<description>Autoregressive Order</description>
  </param>
  <param name="d" type="scalar">
<description>Delay</description>
  </param>
  <param name="vname" type="matrixref" optional="true">
<description>Lags included</description>
  </param>
  <param name="h" type="bool" default="0">
<description>Heteroskedasticity correction</description>
  </param>
  <param name="test" type="bool" default="0">
<description>Linearity Test</description>
  </param>
 </params>
<code>#================================================================
#   SETAR fucntion for gretl by Federico Lampis
#   Carlos III University of Madrid, Spain
#   flampis@emp.uc3m.es
#================================================================
set echo off
set messages off
set loop_maxiter 50000		# CONTROL PARAMETERS (can be modified if desired!)
scalar conf1=.95   			# Confidence Level for Confidence Regions
scalar conf2=.8 	 			# Confidence Level for first step of two-step
scalar trim=0.15              # Percentage of sample to trim from ends for test,
scalar rep=1000               # Number of bootstrap replications
string yname = &quot;Y&quot;			# Name of the variable
#								CREATION DATA MATRIX AND SERIES
series t=time	     			# Index Sample
smpl y --contiguous
smpl +p
list dat=lags(p, y)
list dat+=y t
matrix X={dat}
scalar n=rows(X)
matrix X=msortby(X,d)			# Sorting all the variables of the estimation
series rt=X[,p+2]             # Inverted Index Sample, It's necessary to reverse the series to the original order
series y=X[,p+1]				# Dependent Variable
matrix X=X[,1:p]				# Matrix of Data
series q=X[,d]
matrix qs=values(q)			#Threshold Variable, Y_(t-d)
scalar qn=rows(qs)
if isnull(vname)
  matrix X=X					# Final Matrix of Data if none lags is omitted
  matrix vname=seq(1,cols(X))
else
  matrix X=X[, vname]		   # Final Matrix of Data if some lags is omitted
endif
matrix cc=ones(n,1)
matrix X=cc~X					# Final Matrix of Data plus constant, comment this line to not include it
scalar k=cols(X)
#	ESTIMATION LINEAR AR(P) under null hypothesis of no threshold
matrix mi=invpd(X'X)
matrix beta=mi*(X'*y)
matrix e=y-X*beta
scalar ee= e'*e
scalar sig=ee/(n-k)
matrix xe=X.*e
matrix se = (h &gt; 0) ? sqrt(diag(mi*xe'*xe*mi)): sqrt((diag(mi)*(ee/(n-k))))
scalar vy=sst(y)
scalar r_2=1-ee/sst(y)
matrix betase = beta~se
matrix e3=e.*e				 #Heteroskedasticity Test starting
matrix X3=X.*X
matrix v=e3-X3*(e3'/X3')'
matrix e3=e3-meanc(e3)
matrix te=rows(e)*(1-(v'*v)/(e3'*e3)) #Heteroskedasticity Test end
string snames = &quot; const&quot;				#LINEAR AR MODEL TEXT OUTPUT
loop for i=1..cols(vname) -q
  sprintf foo &quot;-%d&quot;, vname[i]
  string snames += &quot;, @yname@foo&quot;
endloop
matrix addstats = { n, n-k, ee, sig, pvalue(F,(k-1),(n-k),((r_2/(k-1))/((1-r_2)/(n-k)))),r_2, n*(log(sig))+ (2*k), n*(log(sig))+ k*log(n), (pvalue(X, k, te)) }
string snames += &quot;, Observations, Freedom Degrees, Sum Squared Errors, Residual Variance, F-test p-value, R-squared, AIC Inf.Criteria, BIC Inf.Criteria, Heteroskedasticity Test (P-Value)&quot;
print &quot;				Linear AR MODEL&quot;
if h=1
  print &quot;			Heteroskedasticity Correction Used&quot;
else
  print &quot;			OLS Standard Errors Reported&quot;
endif
modprint betase snames addstats
#												   THRESHOLD ESTIMATION (gamma)
matrix sn=zeros(qn,1)
matrix irb=zeros(n,1)
matrix mm=zeros(k,k)
matrix sume=zeros(k,1)
scalar ci=0
scalar r=1
loop  while r&lt;=qn  --quiet
  matrix irf= (q &lt;= qs[r])
  matrix ir=(irf-irb)
  matrix irb=irf
  genr ci=sumc(ir)+ci
  matrix xir= selifr(X,ir)
  genr mm=mm + (xir'*xir)
  genr sume=sume+(ir'*xe)'
  genr mmi=mm-mm*mi*mm
  if (ci&gt;trim*n)&amp;&amp;(ci&lt;(1-trim)*n)				# trim fraction of sample from both ends
    genr sn[r]=ee-sume'*(inv(mmi)*sume)
  else
    genr  sn[r]=ee
  endif
  genr r=r+1
endloop
scalar rmin=iminc(sn)
scalar smin=sn[rmin]
qhat = qs[rmin]								#Threshold Paramhr (gamma) estimated
# qhat = 0      Uncomment this to use a fixed value of the Threshold Variable (gamma), e.g. qhat = 0
#               all the Hansen's inference will be useless as it is based of the gamma estimated
scalar sighat=smin/n
matrix i1=(q&lt;=qhat)
matrix i2=(1-i1)
#										 ESTIMATION OF THE AUTOREGRESSIVE MODELS OF THE SETAR MODEL
matrix Y=y
matrix X1= selifr(X,i1)
matrix Y1= selifr(Y,i1)
matrix X2= selifr(X,i2)
matrix Y2= selifr(Y,i2)
matrix mi1=invpd(X1'X1)
matrix mi2=invpd(X2'X2)
matrix beta1=mi1*(X1'*Y1)
matrix beta2=mi2*(X2'*Y2)
matrix e1=Y1-X1*beta1
matrix e2=Y2-X2*beta2
matrix ej= e1 | e2
scalar n1=rows(Y1)
scalar n2=rows(Y2)
scalar ee1=e1'e1
scalar ee2=e2'e2
scalar sig1=ee1/(n1-k)
scalar sig2=ee2/(n2-k)
scalar sig_jt=(ee1+ee2)/(n-2*k)
matrix ej= e1 | e2
matrix se1 = (h = 0) ? sqrt(diag(mi1)*sig_jt) : sqrt(diag(mi1*(X1.*e1)'*(X1.*e1)*mi1))
matrix se2 = (h = 0) ? sqrt(diag(mi2)*sig_jt) : sqrt(diag(mi2*(X2.*e2)'*(X2.*e2)*mi2))
scalar r2_1=1-(ee1/sumc((Y1-(meanc(Y1))).*(Y1-(meanc(Y1)))))
scalar r2_2=1-(ee2/sumc((Y2-(meanc(Y2))).*(Y2-(meanc(Y2)))))
scalar r2_joint=1-(ee1+ee2)/vy
matrix e3=ej.*ej	        			 #Heteroskedasticity Test starting
matrix v=e3-X3*(e3'/X3')'
matrix e3=e3-meanc(e3)
matrix ste=rows(ej)*(1-(v'*v)/(e3'*e3)) #Heteroskedasticity Test end
matrix Y_hat= X1*beta1 | X2*beta2							# Creation of Setar Estimated Variable
series @yname_h =  Y_hat[,1]
series @yname_h=sortby(rt,@yname_h)
setinfo @yname_h -d &quot;Estimated Variable&quot; -n &quot;Estimated Variable&quot;
series ehat=ej[,1]                                        #Creation of Setar Residuals
series ehat=sortby(rt,ehat)
setinfo ehat -d &quot;Setar Residuals&quot; -n &quot;Setar Residuals&quot;
#                                        ESTIMATION OF THRESHOLD PARAMETER (gamma) CONFIDENCE INTERVAL
if (h=0)
  matrix lr=(sn-smin)/sighat
else
  matrix r1=(X*(beta1-beta2)).*(X*(beta1-beta2))
  matrix r2=r1.*((ej.*ej) * ones(1,cols(r1)))
  matrix qx={q^0, q^1, q^2}
  matrix qh={qhat^0, qhat^1, qhat^2}
  matrix m1=(r1'/qx')'
  matrix m2=(r2'/qx')'
  matrix g1=qh*m1
  matrix g2=qh*m2
  scalar eta2=g2/g1
  matrix lr=(sn-smin)/eta2
endif
c1=-2*log(1-sqrt(conf1))
c2=-2*log(1-sqrt(conf2))
matrix lr1=(lr.&gt; c1)
matrix lr2=(lr.&gt; c2)
if maxc(lr1)=1
  scalar qhat1=qs[iminc(lr1)] 						#lower bound confidence interval of Threshold Paramhr (gamma)
  scalar qhat2=qs[qn+1-iminc(mreverse(lr1))]          #upper bound confidence interval of Threshold Paramhr (gamma)
else
  qhat1=qs[1]
  qhat2=qs[qn]
endif
#												       CONFIDENCE INTERVAL AUTOREGRESSIVE COEFFICIENT
z=imaxc(cdf(N,((seq(1, 300, 1)/100)'))*2-1 .&gt; conf1)/100
matrix beta1l=beta1-se1*z
matrix beta1u=beta1+se1*z
matrix beta2l=beta2-se2*z
matrix beta2u=beta2+se2*z
scalar r=1
loop  while r&lt;=qn  --quiet
  if lr2[r]=0
    genr  i1=(q&lt;=qs[r])
    matrix X1= selifr(X,i1)
    matrix Y1= selifr(Y,i1)
    mi1=invpd(X1'X1)
    b1=mi1*(X1'Y1)
    e1=Y1-X1*b1
    matrix ser1= (h&gt;0) ? sqrt(diag(mi1*(X1.*e1)'(X1.*e1)*mi1)): sqrt(diag(mi1)*(e1'e1)/(rows(Y1[,1])-k))
    beta1l= beta1l ~(b1-ser1*z)
    beta1l=minr(beta1l)
    beta1u= beta1u ~ (b1+ser1*z)
    beta1u=maxr(beta1u)
    matrix i2=(1-i1)
    matrix X2= selifr(X,i2)
    matrix Y2= selifr(Y,i2)
    mi2=inv(X2'X2)
    b2=mi2*(X2'Y2)
    e2=Y2-X2*b2
    matrix  ser2= (h&gt;0) ? sqrt(diag(mi2*(X2.*e2)'(X2.*e2)*mi2)): sqrt(diag(mi2)*(e2'e2)/(rows(Y2[,1])-k))
    beta2l= beta2l ~ (b2-ser2*z)
    beta2l= minr(beta2l)
    beta2u= beta2u ~ (b2+ser2*z)
    beta2u= maxr(beta2u)
  endif
  r=r+1
endloop
#											SETAR MODEL	TEXT OUTPUT
string tmp0=&quot;@yname&quot;
sprintf tmp1 &quot;@yname-%d&quot;, d
printf  &quot;\n*****************************************************************************************\n&quot;
print  &quot;			Threshold Autoregressive Model Estimate&quot;
if h=1
  print  &quot;			Heteroskedasticity Correction Used&quot;
else
  print  &quot;			OLS Standard Errors Reported&quot;
endif
print  &quot;-------------------------------------------------------------------------------------------&quot;
printf  &quot;%-15s\t %-15s\t %-15s\t %5.4f\n&quot;, &quot;Dependent Variable&quot;, tmp0, &quot;Sum Squared Errors&quot;,ee1+ee2
printf  &quot;%-15s\t %-15s\t %-15s\t %5.4f\n&quot;, &quot;Threshold Variable&quot;, tmp1, &quot;Residual Variance&quot;, sig_jt
printf  &quot;%-15s\t %6.4f\t 		%-15s\t %5.4f\n&quot;, &quot;Threshold Estimate&quot;, qhat, &quot; Joint R-Squared&quot;,r2_joint
printf  &quot;%.2g %-15s\t [%5.4f; %5.4f]\t %-15s\t %5.2f\n&quot;, conf1, &quot;Conf.Interval&quot;, qhat1, qhat2, &quot;AIC Inf.Criterion&quot;, 4*(p+1)+n1*log(sig1)+n2*log(sig2)
printf  &quot;%-16s\t %6.4f\t                 %-15s\t %5.2f\n&quot;, &quot;Heterosk_Test (pv)&quot;, pvalue(X, k, ste), &quot;BIC Inf.Criterion&quot;, n1*log(sig1)+n2*log(sig2)+(p+1)*log(n1)+(p+1)*log(n2)
printf  &quot;\n*****************************************************************************************\n&quot;
printf &quot;Regime1: @yname-%.8g &lt;= %.5g\n&quot;, d, qhat
matrix betase1 = beta1~se1
matrix addstats1 = { n1, n1-k, ee1, sig1, pvalue(F,(k-1),(n1-k),((r2_1/(k-1))/((1-r2_1)/(n1-k)))) ,r2_1, n1*log(sig1)+(2*k), n1*log(sig1)+ k*log(n1) }
modprint betase1 snames addstats1
print &quot; &quot;
printf &quot;%.8g Confidence Regions for Paramhrs:\n\n&quot;, conf1
print  &quot;Variable             Low              High&quot;
print  &quot;--------------------------------------------&quot;
printf &quot;%-15s\t %10.5f\t %10.5f \n&quot;, &quot;const&quot;, beta1l[1,1], beta1u[1,1]
loop for i=1..cols(vname) -q
  sprintf tmp &quot;@yname-%d&quot;, vname[i]
  printf  &quot;%-15s\t %10.5f\t %10.5f \n&quot;, tmp,  beta1l[i+1,1], beta1u[i+1,1]
endloop
print &quot; &quot;
print   &quot;*****************************************************************************************&quot;
printf &quot;Regime1: @yname-%.8g &gt; %.5g\n&quot;, d, qhat
matrix betase2 = beta2~se2
matrix addstats2 = { n2, n2-k, ee2, sig2, pvalue(F,(k-1),(n2-k),((r2_2/(k-1))/((1-r2_2)/(n2-k)))), r2_2, n2*(log(sig2))+(2*k), n2*log(sig2) + k*log(n2) }
modprint betase2 snames addstats2
print &quot; &quot;
printf &quot;%.8g Confidence Regions for Paramhrs:\n\n&quot;, conf1
print  &quot;Variable             Low              High&quot;
print  &quot;--------------------------------------------&quot;
printf &quot;%-15s\t %10.5f\t %10.5f \n&quot;, &quot;const&quot;, beta2l[1,1], beta2u[1,1]
loop for i=1..cols(vname) -q
  sprintf tmp &quot;@yname-%d&quot;, vname[i]
  printf  &quot;%-15s\t %10.5f\t %10.5f \n&quot;, tmp,  beta2l[i+1,1], beta2u[i+1,1]
endloop
#											GRAPH OF CONFIDENCE INTERVAL OF THRESHOLD PARAMETER (gamma)
matrix clr=ones(n,1)*c1
series lrc=clr[,1]
loop for i=1..n-qn -q
  genr lr=lr | lr[qn,1]
  genr qs=qs | qs[qn,1]
endloop
series lrs=lr
series otv=qs
scalar upy=int(max(lrs)+(max(lrs)/5))
string upyy
sprintf upyy &quot;%g&quot;, upy
setinfo otv -d &quot;Ordered Threshold variable&quot; -n &quot;Ordered Threshold variable&quot;
setinfo lrc -d &quot;LR-test critical values&quot; -n &quot;LR-test 0.95 critical value&quot;
setinfo lrs -d &quot;LR-test statistics Sequence&quot; -n &quot;LR-test statistics Sequence&quot;
gnuplot lrc lrs otv --with-lines --output=display --single-yaxis { set title 'Confidence interval for Threshold'; set yrange [0:@upyy];}
#												 TEST OF LINEARITY
if test&gt;0
  matrix qs=values(q)
  scalar qn=rows(qs)
  matrix qq = zeros(qn,1)
  scalar r=1
  loop  while r&lt;=qn  --quiet
    qq[r] = sumc(q.=qs[r])
    r=r+1
  endloop
  matrix cqq = cum(qq)
  matrix sq = (cqq.&gt;floor(n*trim)).*(cqq.&lt;(floor(n*(1-trim))))
  matrix qs = selifr(qs,sq)
  matrix  cqq = selifr(cqq,sq)
  scalar qn=rows(qs)
  if h=0
    matrix xe = cum(xe)
  else
    matrix vi =xe'xe
    matrix cxe = cum(xe)
  endif
  matrix sn = zeros(qn,1)
  matrix mmistore = zeros(k*(k+1)/2,qn)
  scalar   cqqb = 1
  matrix   mm = zeros(k,k)
  matrix   vv = zeros(k,k)
  scalar    r=1
  loop  while r&lt;=qn --quiet 						# estimate SETAR model for all possible threshold values
    cqqr = cqq[r]
    mm = mm + ((X[cqqb:cqqr,])'*(X[cqqb:cqqr,]))
    if h=0
      sume = xe[cqqr,]'
      mmi = invpd(mm - mm*mi*mm)
    else
      vv = vv + (xe[cqqb:cqqr,])'*(xe[cqqb:cqqr,])
      sume = cxe[cqqr, ]'
      mmi = invpd(vv - mm*mi*vv - vv*mi*mm + mm*mi*vi*mi*mm)
    endif
    sn[r] = sume'mmi*sume
    cqqb = cqqr+1
    mmistore[,r] = vech(mmi)
    r=r+1
  endloop
  scalar   si = imaxc(sn)
  scalar   smax = sn[si]
  scalar   qmax = qs[si]
  scalar   sig = (ee - smax)/n
  if h=0
    matrix   lr = sn/sig
    scalar    ftest = smax/sig 					# supF test under  Homoskedasticity
  else
    lr = sn
    ftest = sn[si] 								# supF test under Heteroskedasticity
  endif
  matrix fboot = zeros(rep,1)
  scalar j=1
  loop while j&lt;=rep --quiet 						#  perform bootstrap
    if h=0
      y  = normal(0,1)
      e  = y-X*mi*(X'y)
      ee = e'e
      xe = cum(X.*e)
      sn = zeros(qn,1)
    else
      y  = normal(0,1).*e
      xe=X.*(y-X*mi*(X'y))
      cxe = cum(xe)
      sn = zeros(qn,1)
    endif
    r=1
    loop while r&lt;=qn --quiet
      mmi = unvech(mmistore[,r])
      if h=0
        sume = xe[cqq[r],]'
      else
        sume = cxe[cqq[r], ]'
      endif
      sn[r] = sume'mmi*sume
      r=r+1
    endloop
    if h=0
      smax = maxc(sn)
      sig = (ee - smax)/n
      fboot[j] = smax/sig
    else
      fboot[j] = maxc(sn)
    endif
    j=j+1
  endloop
  matrix fboot = msortby(fboot,1)
  scalar pv = meanc(fboot.&gt; ftest)
  scalar cr = fboot[round(rep*0.95)]
  print   &quot;                                        &quot;
  print   &quot;*****************************************************************************************&quot;
  print   &quot;	   Test of Null of No Threshold Against Alternative of Threshold&quot;
  if h=1
    print   &quot;   		Allowing Heteroskedastic Errors (White Corrected)&quot;
  else
    print   &quot;	   		Under Maintained Assumption of Homoskedastic Errors&quot;
  endif
  print   &quot;*****************************************************************************************&quot;
  print &quot;&quot;
  printf &quot;Number of Bootstrap Replications		%.5g\n&quot;, rep
  printf &quot;Trimming Percentage				%.5g\n&quot;, trim
  printf &quot;Threshold Estimate				%.5g\n&quot;, qmax
  printf &quot;LM-test for no threshold			%.5g\n&quot;, ftest
  printf &quot;Bootstrap P-Value				%.5g\n&quot;, pv
endif
list output= @yname_h ehat
return output


</code>
</gretl-function>
<sample-script>
#================================================================
#   SETAR fucntion for gretl by Federico Lampis
#   Carlos III University of Madrid, Spain
#   flampis@emp.uc3m.es
#================================================================
#
# CONTROL PARAMETERS (can be modified if desired!)
#  scalar conf1=.95   			# Confidence Level for Confidence Regions
#  scalar conf2=.8   	 		# Confidence Level for first step of two-step
#  scalar trim=0.15             # Percentage of sample to trim from ends for test,
#  scalar rep=1000              # Number of bootstrap replications for linearity test
#  
#============================================================== 
#
#			FUNCTION ARGUMENTS 
# VARIABLE              = Dependent variable of the SETAR model.
#
# AUTOREGRESSIVE ORDER  = Autoregressive order of the SETAR model, the 2 regimes have the same order.
#
# DELAY    		        = Delay of the Threshold Parameter Y_(t-d), fixing this parameter you are choosing 
#              		      which lag of the Dependent variable you want to use to estimate the model.
#
# LAGS INCLUDED         = Lags of dependent variable included in the SETAR estimation; if this box is empty 
#				          all the lags from 1 to p are included, otherwise you must specify which lags include,
#                         e.g. writing {1, 3, 5} you include the lags 1,3,5 of dependent variable. 	
#
# HETEROSKEDASTICITY
# CORRECTION            = The SETAR model is estimated under the hypothesis the error term is a Martingale Difference and 
#                         the confidence intervals are computed with the white heteroskedasticity correction. Otherwise  
#                         the hypotesis of homoskedasticity is assumed and e_t is iid(0, sigma^2). 
#
# LINEARITY TEST        = Marking this box a linearity test under the null hypothesis of none threshold in the the
#					      autoregressive model is performed. The number of replication is 1000. In case the box 
#                         &quot;Heteroskedasticity correction&quot; is marked the test if carried assuming heteroskedasticity 
#  					      error term.	
#     

# the data used by Tong can be found at http://eom.springer.de/c/c110040.htm
include SETAR.gfn
open http://ricardo.ecn.wfu.edu/pub/gretldata/lynx.gdt
series y=log10(lynx)

#OPTION A
# Estimation of SETAR model with p=2 and d=2. All lags are included in the estimation,  
# the hypothesis of homoskedasticity is assumed and the linear test is NOT performed.
example = SETAR(y, 2, 2, null, 0, 0)

#OPTION B
# Estimation of SETAR model with p=2 and d=2. All lags are included in the estimation,  
# the hypothesis of heteroskedasticity is assumed and the linear test is NOT performed.
example = SETAR(y, 2, 2, null, 1, 0)

#OPTION C
# Estimation of SETAR model with p=2 and d=2. All lags are included in the estimation,  
# the hypothesis of homoskedasticity is assumed and the linear test is performed.
example = SETAR(y, 2, 2, null, 0, 1)

#OPTION D
# Estimation of SETAR model with p=2 and d=2. All lags are included in the estimation,  
# the hypothesis of heteroskedasticity is assumed and the linear test is performed. 
example = SETAR(y, 2, 2, null, 1, 1)

#If you want estimate the SETAR model using not all the lags from 1 to p, create a
# matrix with the lags you want to include:
matrix included={2}

#After that the estimation is performed as before for the options A, B, C, D. 
#E.g. for the case C execute this command: 
example = SETAR(y, 2, 2, &amp;included, 0, 1)
</sample-script>
</gretl-function-package>
</gretl-functions>

