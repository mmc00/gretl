<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="pmbb" ID="1317442188" needs-panel-data="true" minver="1.9.5">
<author>Giuseppe Vittucci</author>
<version>1.6</version>
<date>2013-01-18</date>
<description>Moving Blocks Bootstrap (MBB) for linear panels</description>
<help>
The function implements the panel Moving Blocks Bootstrap (MBB) suggested and analyzed by Gon√ßalves, S. (2011, The moving blocks bootstrap for panel linear regression models with individual fixed effects, Econometric Theory, forthcoming).

The panel MBB is different from the standard MBB of Kunsch (1989) and Liu and Singh (1992), because what is drawn in the resampling is the vector containing the n individual observations at each point in time. 
The panel MBB is robust to serial correlation (like the standard MBB), but also to arbitrary forms of cross sectional dependence.

The simulations carried out in the paper show that the panel MBB performs well even when the degree of serial and cross sectional correlation is large, provided that the block size is appropriately chosen.
In the simulations, Goncalves adopts a data-driven approach, with a block size equal on average to:
- 4.4 when T = 25;
- 7.9 when T = 50; 
- 12.2 when T = 100.

The function has the following arguments:
- the series of the dependent variable;
- the list of regressors (without the constant which is added by default);
- the block size (default size: 3);
- number of replications (default number: 1000);
- seed of the pseudo-random number generator (default 0 = auto).

The function returns a bundle with:
- a matrix (beta) containing the vectors of coefficients in each of the bootstrap replications;
- a matrix (tstat) containing the vectors of Studentized bootstrap statistic in each replication.
 
The function computes and shows also the symmetric bootstrap percentile-t confidence intervals of the coefficients at the 1%, 5% and 10% significance level.
The bootstrap percentile-t confidence intervals are calculated as: beta_hat +/- q_alpha*se_beta
where:
- beta_hat is the FE estimate of the coefficient;
- se_beta is the sqrt of the bootstrap variance estimator based on B bootstrap replications;
- q_alpha is the alpha*100 percentile of the absolute value of the Studentized bootstrap statistic.
The bootstrap t-statistic is Studentized using the multivariate analog of the Gotze and Kunsch (1996) variance estimator, adapted to panel models by Goncalves (2011).

Please note that the function works only with perfectly balanced panels (no missing observation).

For bugs, suggestions, etc. please write to:
giuseppe.vittucci@unimib.it
</help>
<gretl-function name="pmbb" type="bundle">
 <params count="5">
  <param name="y" type="series">
<description>dependent variable</description>
  </param>
  <param name="X" type="list">
<description>regressors (w/o constant)</description>
  </param>
  <param name="l" type="int" min="1" max="50" default="4">
<description>block size</description>
  </param>
  <param name="B" type="int" min="100" max="10000" default="1000">
<description>bootstrap replications</description>
  </param>
  <param name="pseed" type="int" min="0" max="100000" default="0">
<description>seed (0 = auto)</description>
  </param>
 </params>
<code>#set the seed
if pseed
  set seed pseed
endif
#estimate
panel y 0 X --quiet
#coefficients
matrix b = transp($coeff[2:])
#number of obs
scalar nT = $T
#cross-sectional units
scalar n = max($unit)
#time-series length
scalar T = $pd
#number of blocks
scalar k = ceil(T/l)
#number of coefficients
scalar nb = $ncoeff
scalar nb1 = nb - 1
#matrix of bootstrap coefficients
matrix bb = zeros(B,nb1)
#matrix of Studentized bootstrap statistic
matrix tt = zeros(B,nb1)
#from series to matrix
matrix M = {y}~{X}
#from long to wide
matrix MW = { }
loop o = 1..n --quiet
  MW = MW~M[1+(o-1)*T:o*T,]
endloop
loop q = 1..B --quiet
  #random block index
  matrix i = round((T-l)*muniform(k,1))
  #resampling
  matrix MBW = { }
  loop o = 1..k --quiet
    scalar ik = i[o]
    MBW = MBW | MW[ik+1:ik+l,]
  endloop
  MBW = MBW[1:T,]
  #demeaning
  MBW = MBW .- meanc(MBW)
  #from wide to long
  MB = { }
  loop o = 1..n --quiet
    MB = MB | MBW[,1+(o-1)*nb:o*nb]
  endloop
  #from matrix to series
  series yy = MB[,1]
  list xx = null
  loop o = 2..nb --quiet
    series xx$o = MB[,o]
    list xx += xx$o
  endloop
  #estimate
  catch ols yy xx --quiet
  if $error
    bb[q,] = b
    matrix u =  MB[,1] - sumr(MB[,2:nb] .* b)
  else
    bb[q,] = transp($coeff)
    matrix u =  { $uhat }
  endif
  #scores
  matrix S = MB[,2:nb] .* u
  matrix S1 = { }
  loop o = 1..nb1 --quiet
    #sum across unit
    matrix s = sumr(mshape(S[,o],T,n))/n
    matrix s1 = zeros(k,1)
    loop m = 1..T --quiet
      j = int((m-0.5)/l)+1
      s1[j] += s[m]
    endloop
    s1 = s1 / sqrt(l)
    matrix S1 = S1 ~ s1
  endloop
  B1 = (S1'*S1)/k
  matrix A1 = nT*inv(MB[,2:nb]' * MB[,2:nb])
  matrix C = transp(sqrt(diag(A1*B1*A1)))
  #absolute value of the Studentized bootstrap statistic
  tt[q,] = abs(sqrt(T)*((bb[q,]-b)./C))
endloop
#bootstrap variance estimator
matrix se  = sqrt(T)*sdc(bb)
#symmetric bootstrap percentile-t confidence intervals
matrix ci = { }
loop foreach o 0.99 0.95 0.90 --quiet
  matrix q = quantile(tt,$o)
  matrix c1 = b - q .* se
  matrix c2 = b + q .* se
  matrix ci = ci | c1 | c2
endloop
#print output
printf &quot;\nPanel Moving Blocks Bootstrap (MBB) for linear regression models with fixed effects\n&quot;
printf &quot;Bootstrap standard errors and symmetric bootstrap percentile-t confidence intervals\n&quot;
printf &quot;For references see: Goncalves, 2011\n&quot;
printf &quot;\n  Bootstrap replications: %d\n&quot;, B
scalar avel = T/k
printf &quot;  Average block size: %g\n&quot;, avel
printf &quot;  \t\t\t\ts.e.\t\t\t1%% CI\t\t\t5%% CI\t\t\t10%% CI\n&quot;
printf &quot;  ---------------------------------------------------------------------------------------------------------------------\n&quot;
string parnames = strsub(varname(X),&quot;,&quot;,&quot; &quot;)
loop for j = 1..nb1 --quiet
  parname = strsplit(parnames,$j)
  if strlen(parname) &gt; 5
    printf &quot;  %s\t&quot;, parname
  else
    printf &quot;  %s\t\t&quot;, parname
  endif
  printf &quot;%.10g\t%.10g\t%10.8g %10.8g   %10.8g %10.8g   %10.8g %10.8g\n&quot;,b[j],se[j],ci[1,j],ci[2,j],ci[3,j],ci[4,j],ci[5,j],ci[6,j]
endloop
printf &quot;\n&quot;
#set output
bundle output
output[&quot;beta&quot;] = bb
output[&quot;tstat&quot;] = tt
return output
</code>
</gretl-function>
<sample-script>
include pmbb.gfn
open greene14_1.gdt
logs C Q PF LF
list X = l_Q l_PF l_LF
bundle bb = pmbb(l_C,X,3,1000)
</sample-script>
</gretl-function-package>
</gretl-functions>

