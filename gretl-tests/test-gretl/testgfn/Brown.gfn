<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="Brown" ID="1316099021" needs-time-series-data="true" minver="1.9.10">
<author email="ignacio.diaz-emparanza@ehu.eus">Ignacio Diaz-Emparanza</author>
<version>1.5</version>
<date>2015-02-18</date>
<description>Brown linear and quadratic trend models</description>
<label>Brown</label>
<menu-attachment>MAINWIN/Variable/Filter</menu-attachment>
<help>
This package computes a local linear trend and a quadratic trend
The local linear trend is computed as

 mut = at + l bt 

being l the forecasting period,

at = 2s1t - s2t
bt = [delta/(1-delta)]*(s1t-s2t)

s1t : simple exponentially weighted moving average of yt 
      (the dependent variable), with initial value = yt[1]

s2t : simple exponentially weighted moving average of s1t, 
      with initial value = s1t[1]

delta: the smoothness parameter

The quadratic trend is computed as:

mut=at + l bt + l^2 ct

being l the forecasting period,

at = 3 s1t - 3 s2t + s3t
bt = [delta/2(1-delta)^2] *
        [(6-5*delta)s1t-(10-8*delta)s2t+(4-3*delta)s3t]
ct = [delta^2/2(1-delta)^2]*(s1t-2*s2t+s3t)

delta, s1t and s2t as before and
s3t : simple exponentially weighted moving average of s2t, 
      with initial value = s2t[1]


Note: if you run 'dataset addobs +4' before running this package you 
will obtain 4 point forecasts of your trend

Reference: Econometría. Series temporales y Predicción
(1993) Jose M. Otero. (Ed: AC, madrid)
</help>
<gretl-function name="Brown" type="bundle" pkg-role="gui-main">
 <params count="2">
  <param name="y" type="series">
<description>Dependent variable</description>
  </param>
  <param name="delta" type="scalar" default="0.1">
<description>Smoothness parameter</description>
  </param>
 </params>
<code>catch smpl y --contiguous
if $error
  funcerr &quot;There are internal missing values&quot;
endif
string sy = argname(y)
if strlen(sy) == 0
  sy = &quot;y&quot;
endif
scalar lasty1 = lastobs(y)
# Calculating the three smoothings
series s11 = movavg(y,delta)
series s21 = movavg(s11,delta)
series s31 = movavg(s21, delta)
smpl --full
# Moving and extending the smoothing for prediction
series s1 = s11(-1)
series s2 = s21(-1)
series s3 = s31(-1)
series s1 = (obs&lt;=lastobs(y)+1) ? s1 : s1(-1)
series s2 = (obs&lt;=lastobs(y)+1) ? s2 : s2(-1)
series s3 = (obs&lt;=lastobs(y)+1) ? s3 : s3(-1)
# Local linear trend
series at=2*s1-s2
series bt=(delta/(1-delta))*(s1-s2)
series linear= (obs&lt;=lasty1) ? at+bt : at+bt*(obs-lasty1)
# Quadratic trend
series at=3*s1-3*s2+s3
series bt=(delta/2*(1-delta)^2)*((6-5*delta)*s1-(10-8*delta)*s2+(4-3*delta)*s3)
series ct=((delta^2)/(1-delta)^2)*(s1-2*s2+s3)
series quad= (obs&lt;=lasty1) ? at+bt+ct/2 : at+bt*(obs-lasty1)+(ct/2)*(obs-lasty1)^2
bundle b
b[&quot;yname&quot;] = &quot;@sy&quot;
b[&quot;y&quot;] = y
b[&quot;linear&quot;] = linear
b[&quot;quad&quot;] = quad
setnote(b, &quot;y&quot;, &quot;orginal series&quot;)
setnote(b, &quot;linear&quot;, &quot;Brown's linear smoother&quot;)
setnote(b, &quot;quad&quot;, &quot;Brown's quadratic smoother&quot;)
Brown_print(&amp;b)
return b
</code>
</gretl-function>
<gretl-function name="Brown_print" type="void" pkg-role="bundle-print">
 <params count="1">
  <param name="b" type="bundleref"/>
 </params>
<code>string sy = b[&quot;yname&quot;]
series @sy = b[&quot;y&quot;]
string lname = make_sername(sy, &quot;linear&quot;)
string qname = make_sername(sy, &quot;quad&quot;)
series @lname = b[&quot;linear&quot;]
series @qname = b[&quot;quad&quot;]
print @sy @lname @qname --byobs
</code>
</gretl-function>
<gretl-function name="Brown_plot" type="void" pkg-role="bundle-plot">
 <params count="2">
  <param name="b" type="bundleref"/>
  <param name="ptype" type="int" min="0" max="1" default="0">
<description>Plot type</description>
<labels count="2">
"Linear" "Quadratic" </labels>
  </param>
 </params>
<code>string sy = b[&quot;yname&quot;]
series @sy = b[&quot;y&quot;]
string lname = make_sername(sy, &quot;linear&quot;)
string qname = make_sername(sy, &quot;quad&quot;)
series @lname = b[&quot;linear&quot;]
series @qname = b[&quot;quad&quot;]
if ptype == 0
  gnuplot @sy @lname --with-lines --time-series --output=display
else
  gnuplot @sy @qname --with-lines --time-series --output=display
endif
</code>
</gretl-function>
<gretl-function name="Brown_list" type="list">
 <params count="2">
  <param name="y" type="series">
<description>Dependent variable</description>
  </param>
  <param name="delta" type="scalar" default="0.1">
<description>Smoothness parameter</description>
  </param>
 </params>
<code>string sy = argname(y)
if strlen(sy) == 0
  sy = &quot;y&quot;
endif
bundle b = Brown(y, delta)
string lname = make_sername(sy, &quot;linear&quot;)
string qname = make_sername(sy, &quot;quad&quot;)
series @lname = b[&quot;linear&quot;]
series @qname = b[&quot;quad&quot;]
setinfo @lname -d &quot;Brown's local linear trend&quot; -n &quot;Brown's linear smoother&quot;
setinfo @qname -d &quot;Brown's quadratic trend&quot; -n &quot;Brown's quadratic smoother&quot;
list ret = @lname @qname
return ret
</code>
</gretl-function>
<gretl-function name="make_sername" type="string" private="1">
 <params count="2">
  <param name="yname" type="string"/>
  <param name="ext" type="string"/>
 </params>
<code>scalar n = strlen(ext)
string ret
if strlen(yname) + n &lt; 14
  sprintf ret, &quot;%s_%s&quot;, yname, ext
else
  string fmt
  sprintf fmt &quot;%%.%ds_%%s&quot;, 14 - n
  sprintf ret &quot;@fmt&quot;, yname, ext
endif
return ret
</code>
</gretl-function>
<sample-script>
# sample function call for Brown
include Brown.gfn
open data3-6.gdt
dataset addobs +4
bundle bbrown=Brown(Ct,0.7)
</sample-script>
</gretl-function-package>
</gretl-functions>

