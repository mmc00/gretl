<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="summary_xy" ID="1270490526" minver="1.8.4">
<author email="yinung.cycu@gmail.com">Yi-Nung Yang</author>
<version>1.2</version>
<date>2015-07-13</date>
<description>summary_xy(Z,x,y) is a function for summary of Z categorized by two discrete series x and y.</description>
<help>
summary_xy(Z,x,y) is a function for summary of Z variable cross-categorized by two discrete series, x and y. 

The statisitcs reported are mean, sd, skewness, kurtosis, JB normality test, three (optional) Q-stat with user-specified lags, and three (optional) Q2-stat with user-specified lags.

Q and Q2 statistics are speciic for time series only. Please use them with care.

# ==== release notles ===================================================
  2015.7.13: ver. 1.2
      Conform to NEW gretl package rules in which English-only messages
         are output unless if $lang=&quot;zh_TW&quot;.
  2010.4.17: ver. 1.1
      Add a parameter to show the number of observatops (NOBS).
  2010.4.17: ver. 1.0
      First release.
# =======================================================================

This function package in general works in gretl 1.8.4 and higher. But it works best in gretl 1.8.6 and higher.
</help>
<gretl-function name="summary_xy" type="void">
 <params count="20">
  <param name="Z" type="series"/>
  <param name="dx" type="series">
<description>x row category (列分類變數)</description>
  </param>
  <param name="dy" type="series">
<description>y column category (欄分類變數)</description>
  </param>
  <param name="show_sd" type="bool" default="1">
<description>show stdev. (顯示標準差)</description>
  </param>
  <param name="show_sk" type="bool" default="0">
<description>show skewness (顯示偏態)</description>
  </param>
  <param name="show_kt" type="bool" default="0">
<description>show kurtosis (顯示峰態)</description>
  </param>
  <param name="show_jb" type="bool" default="0">
<description>show JB (顯示 JB 值)</description>
  </param>
  <param name="show_q1" type="bool" default="0">
<description>show Q-stat. (顯示 Q 值)</description>
  </param>
  <param name="q1" type="int" min="1" max="300" default="1">
<description>up to lag= (Q 落後期)</description>
  </param>
  <param name="show_q2" type="bool" default="0">
<description>show Q (顯示 Q 值)</description>
  </param>
  <param name="q2" type="int" min="1" max="300" default="5">
<description>up to lag= (Q 落後期)</description>
  </param>
  <param name="show_q3" type="bool" default="0">
<description>show Q (顯示 Q 值)</description>
  </param>
  <param name="q3" type="int" min="1" max="300" default="10">
<description>up to lag= (Q2 落後期)</description>
  </param>
  <param name="show_sq1" type="bool" default="0">
<description>show Q2 (顯示 Q2 值)</description>
  </param>
  <param name="sq1" type="int" min="1" max="300" default="1">
<description>up to lag= (Q2 落後期)</description>
  </param>
  <param name="show_sq2" type="bool" default="0">
<description>show Q2 (顯示 Q 值)</description>
  </param>
  <param name="sq2" type="int" min="1" max="300" default="5">
<description>up to lag= (Q2 落後期)</description>
  </param>
  <param name="show_sq3" type="bool" default="0">
<description>show Q2 (顯示 Q2 值)</description>
  </param>
  <param name="sq3" type="int" min="1" max="300" default="10">
<description>up to lag= (Q2 落後期)</description>
  </param>
  <param name="show_nobs" type="bool" default="0">
<description>show nobs (顯示 NOB 樣本數)</description>
  </param>
 </params>
<code>width=11
dec=4
/*
q=1
q2=5
q3=10
show_sd=1
show_sk=1
show_kt=1
show_q1=0
show_q2=0
show_q3=0
show_sq1=show_q1
show_sq2=show_q2
show_sq3=show_q3
show_jb=1
*/
matrix vx = values(dx)
scalar nx = rows(vx)
matrix vy = values(dy)
scalar ny = rows(vy)
printf &quot;\n&quot;
printf &quot;%*s  ================================================================================\n&quot;,width/3,&quot; &quot;
if $lang=&quot;zh_TW&quot;
  printf &quot;%*s  敘述統計 for %s, 列分類變數: %s, 欄分類變數: %s\n&quot;,width,&quot; &quot;,argname(Z),argname(dx),argname(dy)
endif
printf &quot;%*s  Summary statistics  for %s, categoried by %s and %s\n&quot;,width,&quot; &quot;,argname(Z),argname(dx),argname(dy)
printf &quot;%*s  &quot;,width,&quot; &quot;
set messages on
smpl
set messages off
printf &quot;%*s  --------------------------------------------------------------------------------\n&quot;,width/3,&quot; &quot;
printf &quot;%*s\n&quot;,width*2+8,argname(dy)
printf &quot;%*s  --------------------------------------------------------------------------------\n&quot;,width/3,&quot; &quot;
# --------------print headline of this table
#   printf &quot;\n\n&quot;
printf &quot;%*s&quot;,width,argname(dx)
printf &quot;%*s&quot;,8,&quot; &quot;
loop i=1..ny --quiet
  scalar y = vy[$i]
  printf &quot;%*d&quot;,width, y
endloop
printf &quot;\n&quot;
loop j=1..nx --quiet
  scalar x = vx[$j]
  #smpl (dx=x) --restrict --replace
  printf &quot;%*d&quot;,width, x
  # -----mean code-block -------------------------------
  printf &quot;%*s&quot;,8, &quot;mean&quot;
  loop i=1..ny --quiet
    scalar y = vy[$i]
    catch smpl (dx=x &amp;&amp; dy=y) --restrict --replace
    errval = $error
    if (errval)
      #printf &quot;Got error %d (%s)\n&quot;, errval, errmsg(errval);
      tMEAN=0
    else
      tMEAN=mean(Z)
    endif
    printf &quot;%*.*f&quot;,width,dec, tMEAN
  endloop
  printf &quot;\n&quot;
  # -----SD code-block -------------------------------
  if show_sd=1
    printf &quot;%*s&quot;,width,&quot; &quot;
    printf &quot;%*s&quot;,8, &quot;SD&quot;
    loop i=1..ny --quiet
      scalar y = vy[$i]
      catch smpl (dx=x &amp;&amp; dy=y) --restrict --replace
      errval = $error
      if (errval)
        #printf &quot;Got error %d (%s)\n&quot;, errval, errmsg(errval);
        tSD=0
      else
        tSD=sd(Z)
      endif
      printf &quot;%*.*f&quot;,width,dec, tSD
    endloop
    printf &quot;\n&quot;
  endif
  # -----SK code-block -------------------------------
  if show_sk=1
    printf &quot;%*s&quot;,width,&quot; &quot;
    printf &quot;%*s&quot;,8, &quot;SK&quot;
    loop i=1..ny --quiet
      scalar y = vy[$i]
      catch smpl (dx=x &amp;&amp; dy=y) --restrict --replace
      errval = $error
      if (errval)
        #printf &quot;Got error %d (%s)\n&quot;, errval, errmsg(errval);
        SK=0
      else
        N=nobs(Z)
        scalar SK=(1/N)*sum((Z-mean(Z))^3/(sd(Z)*((N-1)/N)^0.5)^3)
      endif
      printf &quot;%*.*f&quot;,width,dec, SK
    endloop
    printf &quot;\n&quot;
  endif
  # -----KT code-block -------------------------------
  if show_kt=1
    printf &quot;%*s&quot;,width,&quot; &quot;
    printf &quot;%*s&quot;,8, &quot;KT&quot;
    loop i=1..ny --quiet
      scalar y = vy[$i]
      catch smpl (dx=x &amp;&amp; dy=y) --restrict --replace
      if (errval)
        #printf &quot;Got error %d (%s)\n&quot;, errval, errmsg(errval);
        KT=0
      else
        N=nobs(Z)
        scalar KT=(1/N)*sum((Z-mean(Z))^4/(sd(Z)*((N-1)/N)^0.5)^4)
      endif
      printf &quot;%*.*f&quot;,width,dec, KT
    endloop
    printf &quot;\n&quot;
  endif
  #-----JB normality test ---------------------------
  if show_jb=1
    printf &quot;%*s&quot;,width,&quot; &quot;
    printf &quot;%*s&quot;,8, &quot;JB&quot;
    loop i=1..ny --quiet
      scalar y = vy[$i]
      catch smpl (dx=x &amp;&amp; dy=y) --restrict --replace
      if (errval)
        #printf &quot;Got error %d (%s)\n&quot;, errval, errmsg(errval);
        tTest=999
      else
        catch normtest Z --jbera --quiet
        if $nobs&lt;=2
          tTest=999
        else
          tTest=$test
        endif
      endif
      printf &quot;%*.*f&quot;,width,dec, tTest
    endloop
    printf &quot;\n&quot;
    # ----------------  Ljung-box p-value1
    printf &quot;%8s%*s&quot;,&quot; &quot;,width,&quot; &quot;
    loop i=1..ny --quiet
      scalar y = vy[$i]
      catch smpl (dx=x &amp;&amp; dy=y) --restrict --replace
      if (errval)
        #printf &quot;Got error %d (%s)\n&quot;, errval, errmsg(errval);
        tPvaluet=.999
      else
        catch normtest Z --jbera --quiet
        if $nobs&lt;=2
          tPvalue=.999
        else
          tPvalue=$pvalue
        endif
      endif
      sprintf sTmp &quot;[%.3f]&quot;, tPvalue
      printf &quot;%*s&quot;,width,sTmp
    endloop
    printf &quot;\n&quot;
  endif
  # -----Q1 code-block -------------------------------
  if show_q1=1
    printf &quot;%*s&quot;,width,&quot; &quot;
    sprintf sTmp &quot;%s(%d)&quot;,&quot;Q&quot;,q1
    printf &quot;%*s&quot;,8, sTmp
    loop i=1..ny --quiet
      scalar y = vy[$i]
      smpl (dx=x &amp;&amp; dy=y) --restrict --replace
      printf &quot;%*.*f&quot;,width,dec, ljungbox(Z,q1)
    endloop
    printf &quot;\n&quot;
    # ----------------  Ljung-box p-value1
    printf &quot;%8s%*s&quot;,&quot; &quot;,width,&quot; &quot;
    loop i=1..ny --quiet
      scalar y = vy[$i]
      smpl (dx=x &amp;&amp; dy=y) --restrict --replace
      sprintf sTmp &quot;[%.3f]&quot;, pvalue(X,q1,ljungbox(Z,q1))
      printf &quot;%*s&quot;,width,sTmp
    endloop
    printf &quot;\n&quot;
  endif
  # -----Q2 code-block -------------------------------
  if show_q2=1
    printf &quot;%*s&quot;,width,&quot; &quot;
    sprintf sTmp &quot;%s(%d)&quot;,&quot;Q&quot;,q2
    printf &quot;%*s&quot;,8, sTmp
    loop i=1..ny --quiet
      scalar y = vy[$i]
      smpl (dx=x &amp;&amp; dy=y) --restrict --replace
      printf &quot;%*.*f&quot;,width,dec, ljungbox(Z,q2)
    endloop
    printf &quot;\n&quot;
    # ----------------  Ljung-box p-value1
    printf &quot;%8s%*s&quot;,&quot; &quot;,width,&quot; &quot;
    loop i=1..ny --quiet
      scalar y = vy[$i]
      smpl (dx=x &amp;&amp; dy=y) --restrict --replace
      sprintf sTmp &quot;[%.3f]&quot;, pvalue(X,q2,ljungbox(Z,q2))
      printf &quot;%*s&quot;,width,sTmp
    endloop
    printf &quot;\n&quot;
  endif
  # -----Q3 code-block -------------------------------
  if show_q3=1
    printf &quot;%*s&quot;,width,&quot; &quot;
    sprintf sTmp &quot;%s(%d)&quot;,&quot;Q&quot;,q3
    printf &quot;%*s&quot;,8, sTmp
    loop i=1..ny --quiet
      scalar y = vy[$i]
      smpl (dx=x &amp;&amp; dy=y) --restrict --replace
      printf &quot;%*.*f&quot;,width,dec, ljungbox(Z,q3)
    endloop
    printf &quot;\n&quot;
    # ----------------  Ljung-box p-value1
    printf &quot;%8s%*s&quot;,&quot; &quot;,width,&quot; &quot;
    loop i=1..ny --quiet
      scalar y = vy[$i]
      smpl (dx=x &amp;&amp; dy=y) --restrict --replace
      sprintf sTmp &quot;[%.3f]&quot;, pvalue(X,q3,ljungbox(Z,q3))
      printf &quot;%*s&quot;,width,sTmp
    endloop
    printf &quot;\n&quot;
  endif
  # -----SQ1 code-block -------------------------------
  if show_sq1=1
    printf &quot;%*s&quot;,width,&quot; &quot;
    sprintf sTmp &quot;%s(%d)&quot;,&quot;Q2&quot;,sq1
    printf &quot;%*s&quot;,8, sTmp
    loop i=1..ny --quiet
      scalar y = vy[$i]
      smpl (dx=x &amp;&amp; dy=y) --restrict --replace
      printf &quot;%*.*f&quot;,width,dec, ljungbox(Z^2,sq1)
    endloop
    printf &quot;\n&quot;
    # ----------------  Ljung-box p-value1
    printf &quot;%8s%*s&quot;,&quot; &quot;,width,&quot; &quot;
    loop i=1..ny --quiet
      scalar y = vy[$i]
      smpl (dx=x &amp;&amp; dy=y) --restrict --replace
      sprintf sTmp &quot;[%.3f]&quot;, pvalue(X,sq1,ljungbox(Z^2,sq1))
      printf &quot;%*s&quot;,width,sTmp
    endloop
    printf &quot;\n&quot;
  endif
  # -----SQ2 code-block -------------------------------
  if show_sq2=1
    printf &quot;%*s&quot;,width,&quot; &quot;
    sprintf sTmp &quot;%s(%d)&quot;,&quot;Q2&quot;,sq2
    printf &quot;%*s&quot;,8, sTmp
    loop i=1..ny --quiet
      scalar y = vy[$i]
      smpl (dx=x &amp;&amp; dy=y) --restrict --replace
      printf &quot;%*.*f&quot;,width,dec, ljungbox(Z^2,sq2)
    endloop
    printf &quot;\n&quot;
    # ----------------  Ljung-box p-value1
    printf &quot;%8s%*s&quot;,&quot; &quot;,width,&quot; &quot;
    loop i=1..ny --quiet
      scalar y = vy[$i]
      smpl (dx=x &amp;&amp; dy=y) --restrict --replace
      sprintf sTmp &quot;[%.3f]&quot;, pvalue(X,sq2,ljungbox(Z^2,sq2))
      printf &quot;%*s&quot;,width,sTmp
    endloop
    printf &quot;\n&quot;
  endif
  # -----SQ3 code-block -------------------------------
  if show_sq3=1
    printf &quot;%*s&quot;,width,&quot; &quot;
    sprintf sTmp &quot;%s(%d)&quot;,&quot;Q2&quot;,sq3
    printf &quot;%*s&quot;,8, sTmp
    loop i=1..ny --quiet
      scalar y = vy[$i]
      smpl (dx=x &amp;&amp; dy=y) --restrict --replace
      printf &quot;%*.*f&quot;,width,dec, ljungbox(Z^2,sq3)
    endloop
    printf &quot;\n&quot;
    # ----------------  Ljung-box p-value1
    printf &quot;%8s%*s&quot;,&quot; &quot;,width,&quot; &quot;
    loop i=1..ny --quiet
      scalar y = vy[$i]
      smpl (dx=x &amp;&amp; dy=y) --restrict --replace
      sprintf sTmp &quot;[%.3f]&quot;, pvalue(X,sq3,ljungbox(Z^2,sq3))
      printf &quot;%*s&quot;,width,sTmp
    endloop
    printf &quot;\n&quot;
  endif
  # -----NOBS code-block -------------------------------
  #    printf &quot;%*s&quot;,8, &quot;NOB&quot;
  if show_nobs=1
    printf &quot;%*s&quot;,width,&quot; &quot;
    printf &quot;%*s&quot;,8, &quot;NOBS&quot;
    loop i=1..ny --quiet
      scalar y = vy[$i]
      catch smpl (dx=x &amp;&amp; dy=y) --restrict --replace
      errval = $error
      if (errval)
        #printf &quot;Got error %d (%s)\n&quot;, errval, errmsg(errval);
        tNOBS=0
      else
        tNOBS=nobs(Z)
      endif
      #        printf &quot;%*s&quot;,width,&quot; &quot;
      printf &quot;%*d&quot;,width, tNOBS
    endloop
    printf &quot;\n&quot;
  endif
endloop
printf &quot;\n\n&quot;
printf &quot;*SD, SK, KT, and JB denote standard deviation, sknewness, kurtosis, and Jarque-Bera statistic, respectively.\n&quot;
printf &quot; Figures in [] are corresponding p-values\n&quot;
if $lang=&quot;zh_TW&quot;
  printf &quot;*SD 是標準差, SK 是偏態係數, KT 是峰態係數, 小括號中的數字是標準差, 中括號中的數字是 p值\n&quot;
endif
</code>
</gretl-function>
<sample-script>
open denmark
include summary_xy.gfn
# extract year and quarter from obslabel(i)
scalar T=$nobs
series year=NA
series quarter=NA
scalar yr=0
scalar qq=0

loop for i=1..T -q
string tmp=obslabel(i)
    sscanf tmp, &quot;%d:%d&quot;, &amp;yr, &amp;qq
    year[i]=yr
    quarter[i]=qq
endloop
series decade=(year&gt;1979) ? 1980 : 1970

# if only row category is needed,use &quot;const&quot; in coloumn parameter.  
summary_xy(LRM,year,const)
# show mean, stdev., skewness, kurtosis, JB in the row-column table. 
summary_xy(LRM,decade,quarter,1,1,1,1)
# show additional Q and Q2 statisitics (carefully used with time series).
summary_xy(LRM,decade,quarter,1,1,1,1,1,1,1,4)
</sample-script>
</gretl-function-package>
</gretl-functions>

