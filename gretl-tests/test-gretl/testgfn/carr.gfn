<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="carr" ID="1371659458" needs-time-series-data="true" minver="1.9.9">
<author email="yinung@cycu.edu.tw">Yi-Nung Yang</author>
<version>0.7</version>
<date>2015-07-11</date>
<description>CARR models: ECARR and WCARR by Ray Y. Chou (2005, JCMB)</description>
<label>CARR</label>
<menu-attachment>MAINWIN/Model/TSModels</menu-attachment>
<help>
This function package is to estimate the CARR models developed by Ray Yutien Chou (JMCB, 2005, v37, n3,p.562-582). Two distributions (expoenetial and Weibull distributions) are available for the MLE of CARR models in this package. Diagnosis of Ljung-Box Q and density plot on residuals are also available.
</help>
<gretl-function name="carr" type="bundle" pkg-role="gui-main">
 <params count="8">
  <param name="R" type="series">
<description>Dependent Variable (應變數)</description>
  </param>
  <param name="GARCH" type="int" min="0" max="9" default="1">
<description>p</description>
  </param>
  <param name="ARCH" type="int" min="1" max="9" default="1">
<description>q</description>
  </param>
  <param name="indepvar" type="list" optional="true">
<description>Exogenous Variables (外生變數集)</description>
  </param>
  <param name="ndist" type="int" min="1" max="2" default="1">
<description>Distribution</description>
<labels count="2">
"Exponential" "Weibull" </labels>
  </param>
  <param name="LB_Q" type="int" min="0" max="200" default="0">
<description>Lag order of Ljung-Box Q (殘差 Q 檢定階次)</description>
  </param>
  <param name="ShowInit" type="bool" default="1">
<description>Show Initial Values for ML. (顯示起始值)?</description>
  </param>
  <param name="backcast" type="scalar" min="0" max="5" default="1">
<description>backcasting (參數)</description>
  </param>
 </params>
<code>set echo off
set messages off
# --- 用 garch 估計取得啟始值
scalar garch_err=0
sqrtR=R^0.5
catch garch GARCH ARCH; sqrtR --nc --robust -q
if $error
  printf &quot;---------------------------------------\n&quot;
  printf &quot;Cannot get initial values from GARCH...\n&quot;
  printf &quot;---------------------------------------\n&quot;
  errval=$error
  if (errval)
    printf &quot;Got error %d (%s)\n&quot;, errval, errmsg(errval)
  endif
  # --- estimate GARCH(1,1) instead for ensuring initial values
  scalar garch_err=1
  garch 1 1; sqrtR --nc --robust -q
endif
# --- initial value for omega
scalar omega = $coeff[1]
if ARCH=0
  funcerr &quot;q 必須大於 0&quot;
else
  string v_eq = &quot;lambda = omega &quot;
  string arch_param = &quot;omega &quot;
  # ---以下用於 lincomb()
  string s_xlist = &quot;&quot;
  loop j=1..ARCH  --quiet
    sprintf arch_term &quot;+alpha%d*R(-%d)&quot;,j,j
    sprintf v_param &quot;alpha%d &quot;,j
    # ---以下用於 lincomb()
    sprintf s_arch_term &quot; R(-%d)&quot;,j
    if garch_err=1                       # --- garch 無法取得 initial values
      if j=1
        scalar @v_param = $coeff[2]
      else
        scalar @v_param = 0.02
      endif
    else
      scalar @v_param = $coeff[j+1]    # --- omega is $coeff[1]
    endif
    string v_eq = v_eq ~ arch_term
    string arch_param = arch_param ~ v_param
    # ---以下用於 modprint()
    string s_xlist = s_xlist ~ s_arch_term
  endloop
  if GARCH&gt;0
    loop j=1..GARCH  --quiet
      sprintf arch_term &quot;+beta%d*lambda(-%d)&quot;,j,j
      sprintf v_param &quot;beta%d &quot;,j
      # ---以下用於 lincomb()
      sprintf s_arch_term &quot; lambda(-%d)&quot;,j
      if garch_err=1
        if j =1
          scalar @v_param = $coeff[3]/2
        else
          scalar @v_param = 0.025
        endif
      else
        scalar @v_param = $coeff[ARCH+1+j]
      endif
      string v_eq = v_eq ~ arch_term
      string arch_param = arch_param ~ v_param
      # ---以下用於 modprint()
      string s_xlist = s_xlist ~ s_arch_term
    endloop
  endif
endif
#     printf &quot;%s\n&quot;, v_eq
#     printf &quot;%s\n&quot;, arch_param
# --- 處理外生變數集 indepvar
tL2 = indepvar
tL3 = indepvar || const
genr is_const = (tL2 = tL3)
if is_const = 1
  tL2 -= const
endif
i=1
loop foreach j tL2  --quiet
  string temp=&quot;x&quot;
  sprintf temp &quot;X%d&quot;,i
  #producing tmp%d independent variables
  genr @temp = tL2.$j
  # printf &quot;%s --- &quot;,&quot;$j&quot;
  # ---以下用於 modprint()
  string s_xlist = s_xlist ~ &quot; $j&quot;
  i=i+1
endloop
scalar n_x = i-1
scalar j=1
# define ----------&gt;  mean eq.
/*
if is_const = 1
  # --- 外生變數集中不可有 const
else
  string m_eq = &quot;&quot;
  string tParam = &quot; &quot;
endif
*/
string m_eq = &quot;&quot;
string tParam = &quot; &quot;
if n_x &gt;=1
  loop j=1..n_x  --quiet
    sprintf tx &quot;+gamma%d*X%d&quot;, j,j
    sprintf tparameter &quot;gamma%d &quot;, j
    # ---以下用於 modprint()
    sprintf s_tx &quot; X%d&quot;, j
    scalar @tparameter = 0.0001
    string m_eq = m_eq ~ tx
    string tParam = tParam ~ tparameter
    # ---以下用於 modprint()
    #string s_xlist = s_xlist ~ s_tx
  endloop
endif
#     printf &quot;%s\n&quot;, m_eq
#     printf &quot;%s\n&quot;, tParam
# ---  將 CARR 和外生變數方程式合併
string carr_eq=v_eq ~ m_eq
string carr_param = arch_param ~ tParam
#     printf &quot;%s\n&quot;, carr_eq
#     printf &quot;%s\n&quot;, carr_param
# ---- 顯示最大概似估計時用之啟始值----
if ShowInit = 1  ### --- printing intial values
  printf &quot;\n&quot;
  printf &quot;Initial Values for Parameters in MLE: \n&quot;
  printf &quot;--------------------------------------\n&quot;
  printf &quot;omega=%.6f, &quot;,omega
  loop j=1..ARCH  --quiet
    printf &quot;alpha%d=%.6f, &quot;,j, alpha$j
  endloop
  if GARCH&gt;0
    loop j=1..GARCH  --quiet
      printf &quot;beta%d=%.6f, &quot;,j, beta$j
    endloop
  endif
  printf &quot;\n\n&quot;
endif
#scalar omega = $coeff[1]  # --- already given
#omega=0.152
/*
scalar alpha = 0.2
scalar beta = 0.7
scalar gamma=0
scalar delta=0
*/
#printf &quot;=================================================================\n&quot;
if ndist=1  # ---- Exponential distribution for ECARR
  #printf &quot; ECARR models: CARR QML Estimation with Expoenetial Distribution.\n&quot;
  #printf &quot;=================================================================\n&quot;
  mle ll = -ln(lambda) - R/lambda
    series lambda = mean(R)*backcast
    series @carr_eq
    params @carr_param
  end mle --robust -q
  mCoeff=$coeff
  mStderr=$stderr[1:$ncoeff]
  string s_Weibull = &quot;&quot;
endif
if ndist=2  # ---- Weibull distribution for WCARR
  #printf &quot; WCARR models: CARR ML Estimation with Weibull Distribution.\n&quot;
  #printf &quot;=================================================================\n&quot;
  scalar theta=2
  mle ll = ln(theta/R) +theta*ln(gammafun(1+1/theta)*R/lambda) - (gammafun(1+1/theta)*R/lambda)^theta
    series lambda = mean(R)*backcast
    series @carr_eq
    params @carr_param theta
  end mle -q
  mCoeff=$coeff[1:$ncoeff]
  mStderr=$stderr[1:$ncoeff]
  string s_Weibull = &quot; theta&quot;
endif
# --- for modprint
mExtraStat=$lnl ~ $aic ~ $bic ~ $hqc
sExtraStat=&quot;log-likelihood Akaike-criterion Schwarz-criterion Hannan-Quinn&quot;
bundle m
m[&quot;depvarname&quot;] = argname(R)
m[&quot;errcode&quot;] =   $error
#bdlRet.Rhat=$yhat
/*
printf &quot;===%s===\n&quot;,v_eq
printf &quot;===&gt;%s&lt;===\n&quot;,m_eq
printf &quot;===&gt;%s&lt;===\n&quot;,carr_eq
printf &quot;===&gt;%s&lt;===\n&quot;,s_xlist
*/
# ---  s_list is to store variables in lambda equation
bob=xmax(ARCH,GARCH)+1   # beginning of observation
series lambda=mean(R)
smpl bob ;
series @carr_eq
string s_xlist = &quot;omega &quot; ~ s_xlist ~ s_Weibull
# list s_list = @s_xlist
mCoeffStderr=mCoeff~mStderr
m[&quot;R&quot;]=R
m[&quot;dep_name&quot;]=argname(R)
m[&quot;ndist&quot;] = ndist
sprintf s_nobs &quot;%d&quot;,$t2-$t1
m[&quot;smpl_range&quot;] = obslabel($t1) ~&quot;:&quot;~obslabel($t2) ~ &quot; (T = &quot; ~ s_nobs ~&quot;)&quot;
m[&quot;mCoeff&quot;] = mCoeff
m[&quot;mStderr&quot;] = mStderr
m[&quot;mExtraStat&quot;] = mExtraStat
m[&quot;sExtraStat&quot;] = sExtraStat
if ndist=2
  m[&quot;theta&quot;] = $coeff(theta)
else
  m[&quot;theta&quot;] =1
endif
string m[&quot;s_xlist&quot;] = s_xlist
m[&quot;lambda&quot;] =lambda
m[&quot;stz_u&quot;] =R/lambda
m[&quot;LB_Q&quot;]=LB_Q
#--- 以下兩行重覆, 可刪除
#string s_xlist = &quot;omega &quot; ~ s_xlist
#mCoeffStderr=mCoeff~mStderr
# ---will be used in bundle_print
# modprint mCoeffStderr s_xlist
carr_print(&amp;m, 1)
carr_test(&amp;m, 1)
return m
</code>
</gretl-function>
<gretl-function name="carr_bundle_print" type="void" pkg-role="bundle-print">
 <params count="1">
  <param name="b" type="bundleref"/>
 </params>
<code># 存成 icon 之後, 再次開啟時, 呼叫的是這個在 bundle-print 對應的函數
# 故務必在此重新顯示估計結果
carr_print(&amp;b, 1)
carr_test(&amp;b, 1)
</code>
</gretl-function>
<gretl-function name="carr_print" type="void">
 <params count="2">
  <param name="b" type="bundleref"/>
  <param name="verbose" type="scalar" min="0" max="3" default="0"/>
 </params>
<code>err = b[&quot;errcode&quot;]
if err == 0
  #printf &quot;in carr_print()...\n&quot;
  ndist=b[&quot;ndist&quot;]
  matrix mCoeffStderr = b[&quot;mCoeff&quot;] ~ b[&quot;mStderr&quot;]
  string s_xlist = b[&quot;s_xlist&quot;] ~ &quot; &quot; ~ b[&quot;sExtraStat&quot;]
  matrix mExtraStat = b[&quot;mExtraStat&quot;]
  #s_xlist
  printf &quot;=================================================================\n&quot;
  if ndist=1  # ---- Exponential distribution for ECARR
    printf &quot; ECARR models: CARR QML Estimation with Expoenetial Distribution.\n&quot;
  endif
  if ndist=2  # ---- Exponential distribution for ECARR
    printf &quot; WCARR models: CARR ML Estimation with Weibull Distribution.\n&quot;
  endif
  printf &quot;=================================================================\n&quot;
  printf &quot;ML, using observations: %s\n&quot;,b[&quot;smpl_range&quot;]
  #printf &quot;最大概似法 (ML), 使用中之子樣本範圍: %s\n&quot;,b[&quot;smpl_range&quot;]
  if ndist=1  # ---- likehood function for ECARR
    printf &quot;ll = -ln(lambda) - R/lambda\n&quot;
    printf &quot;QML standard errors\n&quot;
  endif
  if ndist=2  # ---- Exponential distribution for ECARR
    printf &quot;ll = ln(theta/R) +theta*ln(gammafun(1+1/theta)*R/lambda) - (gammafun(1+1/theta)*R/lambda)^theta\n&quot;
    printf &quot;Standard errors based on Outer Products matrix\n&quot;
  endif
  printf &quot;\n&quot;
  printf &quot;Dependent variable: %s\n&quot;,b[&quot;dep_name&quot;]
  modprint mCoeffStderr s_xlist mExtraStat
else
  printf &quot;\nESTIMATION FAILED: %s\n&quot;, errmsg(err)
endif
</code>
</gretl-function>
<gretl-function name="GUI_carr_plot" type="void" pkg-role="bundle-plot">
 <params count="2">
  <param name="b" type="bundleref"/>
  <param name="ptype" type="int" min="0" max="1" default="0">
<description>Plot type</description>
<labels count="2">
"Range and estimated lambda plot" "Residual density" </labels>
  </param>
 </params>
<code>if ptype == 0
  carr_plot_R(&amp;b)
else
  carr_plot_density(&amp;b)
endif
</code>
</gretl-function>
<gretl-function name="carr_plot_R" type="void">
 <params count="1">
  <param name="b" type="bundleref"/>
 </params>
<code>#string tmpfile = gig_grph(model[&quot;depvarname&quot;], model[&quot;uhat&quot;], model[&quot;h&quot;])
#gnuplot --input=&quot;@tmpfile&quot; --output=&quot;display&quot;
#series x=normal()
string dep_name=b[&quot;dep_name&quot;]
series @dep_name=b[&quot;R&quot;]
series lambda=b[&quot;lambda&quot;]
gnuplot @dep_name lambda --time --with-lines --output=&quot;display&quot;
</code>
</gretl-function>
<gretl-function name="carr_plot_density" type="void">
 <params count="1">
  <param name="b" type="bundleref"/>
 </params>
<code>scalar ndist=b[&quot;ndist&quot;]
series stz_u=b[&quot;stz_u&quot;]
if ndist=2
  scalar theta=b[&quot;theta&quot;]
else
  scalar theta=1
endif
matrix d = kdensity(stz_u^theta)
#gnuplot x --time  --with-lines --suppress-fitted --output=&quot;display&quot;
gnuplot 2 1 --matrix=d  --with-lines --suppress-fitted --output=&quot;display&quot;
</code>
</gretl-function>
<gretl-function name="carr_test" type="void" pkg-role="bundle-test">
 <params count="2">
  <param name="b" type="bundleref"/>
  <param name="ptype" type="int" min="1" max="2" default="1">
<description>test type</description>
<labels count="2">
"Ljung-Box Q" "Cramer-von Mises" </labels>
  </param>
 </params>
<code>if ptype == 1
  #carr_Q_test(&amp;b)
  LB_Q=b[&quot;LB_Q&quot;]
  series stz_u=b[&quot;stz_u&quot;]
  #setinfo normalized_range -d &quot;normalized range&quot;
  if LB_Q &gt;0
    printf &quot;Ljung-Box Q of normalized_range (stz_u):\n&quot;
    corrgm stz_u  LB_Q  --quiet
  endif
else
  #carr_W2_test(&amp;b)
endif
</code>
</gretl-function>
<sample-script>
# Estimate CARR models developed by Ray Yutien Chou (JMCB, 2005, v37, n3,p.562-582)
# You might use the following data file to run the sample script belowe.

include carr.gfn
open http://ricardo.ecn.wfu.edu/pub/gretldata/2005-CARR.gdt

# --- estimate ECARR(1,1)
carr(R,1,1,null,1)

# --- estimate ECARRX(1,1) with exogenous variables, r(-1) and abs(r(-1))
series abs_r=abs(r)
list alist = r(-1) abs_r(-1)
carr(R,1,1,alist,1)

# --- estimate ECARRX(1,1) with exogenous variables, r(-1)
series abs_r=abs(r)
list blist = r(-1)
carr(R,1,1,blist,1)

# --- estimate WCARR(1,1)
carr(R,1,1,null,2)
</sample-script>
</gretl-function-package>
</gretl-functions>

