<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="LOGIT_HETERO" ID="1373976698" minver="1.9.4">
<author email="artur.tarassow@googlemail.com">Artur Tarassow</author>
<version>0.12</version>
<date>2014-11-03</date>
<description>Performs two LM specification tests for the LOGIT model</description>
<help>
' THIS PROGRAM PERFORMS 2 LM SPECIFICATION TESTS FOR THE LOGIT MODEL:
' (1) An LM test of the null that the null hypothesis that the errors of a Logit model are 
homoskedastic, against the alternative that they are heteroskedastic, being a function
of the &quot;r&quot; variables in Z.  We will call this the LM-HET test

'NOTE:  Z MUST NOT INCLUDE AN INTERCEPT - See Davidson &amp; MacKinnon (2004, p.464)

' (2) An LM test of the null that the model is Logistic, against a more flexible
functional form. We will call this the LM_RESET test.

' The Illlustrative code below involves a model with with 2 covariates and an intercept.
In this example the &quot;Z&quot; variables that give rise to the potential heteroskedasticity are taken to be the 2 covariates in the model itself . This can be amended to suit - see the comments in the code below.

'The notation and construction of the test statistics follows the exposition in
Davidson &amp; MacKinnon (2004, pp.464-465).

' References: 
' 1. Davidson, R. &amp; J. G. MacKinnon (1984), &quot;Convenient specification tests for logit and probit models&quot;, Journal of Econometrics, 25, 241-262.

' 2. Davidson, R. &amp; J. G. MacKinnon (2004), &quot;Econometric Theory and Methods&quot;,       Oxford University Press, Oxford
'=============================================================
' The orginal Eviews code was written by David Giles,
Dept. of Economics, University of Victoria, October 2011
'=============================================================

The original Eviews code was translated by
Artur Tarassow, Univ. of Hamburg, GER
Email: 
artur.tarassow@wiso.uni-hamburg.de
or
artur.tarassow@googlemail.com
July 2013

CHANGELOG:
0.12 (Nov 2014, thanks to Sven Schreiber for spotting the bugs)
1) fix example script
2) fix &quot;smpl --no-missing&quot; to only refer to included variables
3) Minor adaptions

0.11:	Instead of estimating the logit within the function, just provide the estimated $coeff matrix
</help>
<gretl-function name="LOGIT_HETERO" type="matrix">
 <params count="3">
  <param name="y" type="list">
<description>$ylist Endogenous</description>
  </param>
  <param name="xx" type="list">
<description>$xlist; Exogenous, including the const oif wanted</description>
  </param>
  <param name="betahat" type="matrix">
<description>Estimated vector</description>
  </param>
 </params>
<code>list lAll = y xx
smpl lAll --no-missing
# Modify the covariates in the group &quot;xx&quot; and in the Lrobit model, as appropriate.
# Also modify the hetero. variates in the group &quot;zz&quot; as appropriate, and set &quot;r&quot; equal to the number of variables in &quot;zz&quot;. (NOTE: &quot;zz&quot; must NOT include an intercept variable)
# Note that Y is the binary (zero-one) dependent variable
matrix x = { xx }
scalar r=nelem(xx)-1	#subtract the constant
scalar CONST = inlist(xx,0)
if CONST == 1
  list zz = xx - 0
else
  list zz = xx
endif
matrix z = { zz }
matrix my = { y }
# Adjust the sample size to suit
scalar n=rows(my)
matrix one = 1	#constant
# Note that in the next line, the Logit model is estimated with het-consistent
#standard errors - see the &quot;h&quot; option. This could be changed if you want.
#logit y xx --robust --quiet
matrix xbeta = (betahat'*x')'	#($coeff'*x')'	#x could be replaced by $xlist
#matrix xbeta = ($coeff'*x')'			# OLD
matrix bf=1/(one+exp(-xbeta))			#bf is simply $yhat
matrix sf=exp(xbeta)./(one+exp(xbeta)).^2
matrix v=bf.*(one-bf)
matrix lhs=(my-bf)./sqrt(v)
matrix scalefacx = sf./sqrt(v)
matrix scalefacz = -xbeta.*scalefacx
matrix scalexv = scalefacx
matrix scalezv = scalefacz
matrix r1m=x.*scalexv
matrix r2m=z.*scalezv
# Fit the auxiliary regression for the homoskedasticity test:
matrix BIGR = r1m ~ r2m
matrix U = zeros(rows(lhs),1)
OUT = mols(lhs,BIGR,&amp;U)
matrix fitted = lhs .- U
matrix f2=fitted.^2
scalar lm_het=sum(f2)
# The homoskedasticity  test statistic is asymptotically Chi Square with &quot;r&quot; degrees of freedom, under the null of  homoskedasticity, where &quot;r&quot; is the number of variables involved in the (alternative) heteroskedasticity. So calculate the (asymptotic)  p-value:
scalar het_p_val = (1-cdf(c,r,lm_het))		#pvalue(c,lm_het,r)
# Fit the auxiliary regression for the functional form (RESET) test:
matrix r3=scalefacx.*(xbeta).^2
matrix rhs = r3 ~ r1m
# The coeffcient to be tested is that of the first regerssor - see the ordering of the above group
matrix V = zeros(rows(lhs),cols(rhs))
matrix U = zeros(rows(lhs),1)
OUT = mols(lhs,rhs,&amp;U,&amp;V)
matrix stderr = sqrt(diag(V))	#standard errors
matrix TSTAT = OUT./stderr
scalar lm_reset=TSTAT[1]
# The functional form  test statistic is asymptotically standard normal. So calculate the (asymptotic)  p-value:
scalar reset_p_val=2*(1-cnorm(abs(lm_reset)))
#PRINT OUT
printf &quot;-------------------------------------------------------\n&quot;
printf &quot;Test results (n=%d):\n&quot;, n
printf &quot;(a) LM-HET = \t %.3f (p=%.3f)\n&quot;, lm_het, het_p_val
printf &quot;(b) LM-RESET = \t %.3f (p=%.3f)\n&quot;, lm_reset, reset_p_val
printf &quot;-------------------------------------------------------\n&quot;
matrix RET = zeros(2,2)
RET[1,1] = lm_het
RET[1,2] = het_p_val
RET[2,1] = lm_reset
RET[2,2] = reset_p_val
colnames(RET, &quot;test pval&quot;)
rownames(RET, &quot;HET RESET&quot;)
return RET
</code>
</gretl-function>
<sample-script>
include LOGIT_HETERO.gfn
open greene19_1.gdt --quiet
list ylist = GRADE
list xlist = 0 GPA TUCE PSI
logit GRADE 0 GPA TUCE PSI

CHECK = LOGIT_HETERO(ylist,xlist,$coeff)
</sample-script>
</gretl-function-package>
</gretl-functions>

