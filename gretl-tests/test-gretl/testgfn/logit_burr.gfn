<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="logit_burr" ID="1415440812" minver="1.9.6">
<author>Artur Tarassow</author>
<version>0.5</version>
<date>2014-11-08</date>
<description>LM test of the null that the distribution is Logistic against the alternative that it is Burr Type 2</description>
<help>
' LM test of the null that the distribution is Logistic against the alternative 
   that is is Burr Type 2 (and hence skewed - to the left or to the right)

   'Illlustrative code with 2 covariates and an intercept. The notation and
   construction of the LM test statistic follows the exposition in Thomas (1993) 

   ' References: 
   ' J. M. Thomas (1993), &quot;On Testing the Logistic Assumption in Binary
   'Dependent Variable Models&quot; Empirical Economics, 1993, 18:381-392

   ' D. J. Poirier (1980), &quot; A Lagrange Multiplier Test for Skewness in Binary
   Logit Models. Economics Letters&quot;, 5, 141-143
   '=====================================================================================
   ' Code written by David Giles, Dept. of Economics, University of Victoria, March 2010
   ' URL: http://web.uvic.ca/~dgiles/downloads/binary_choice/Logistic_Burr.prg
   '=====================================================================================
   
The original Eviews code was translated by
Artur Tarassow, Univ. of Hamburg, GER
Email: 
artur.tarassow@wiso.uni-hamburg.de
or
artur.tarassow@googlemail.com

CHANGELOG:
0.5 (Nov. 2014)
</help>
<gretl-function name="logit_burr" type="matrix">
 <params count="2">
  <param name="y" type="list">
<description>Endogenous</description>
  </param>
  <param name="xx" type="list">
<description>Exogenous, including the const oif wanted</description>
  </param>
 </params>
<code>
matrix x = { xx }
matrix my = { y }
scalar n = rows(my)
matrix one = 1
list xx = const || xx

logit y xx --robust --quiet
matrix x = { xx }
matrix xbeta = ($coeff'*x')'
matrix dee = one + exp(xbeta)
matrix bf = 1/dee
matrix sf = (dee-1)./dee.^2
matrix sr = my.*sqrt(bf./(1.-bf)) - (1.-my).*sqrt((1.-bf)./bf)
matrix scalefac = sf./sqrt((one.-bf).*bf)
matrix r1m = x.*scalefac
matrix r2m = log(dee).*sqrt(bf./(one-bf))
matrix bigr = r1m ~ r2m
matrix U = zeros(rows(sr),1)
OUT = mols(sr,bigr,&amp;U)
matrix fitted = sr .- U
matrix f2 = fitted.^2
matrix lm = sum(f2)
matrix p_val = 1-cdf(c,1,lm)
matrix RET = lm | p_val

# print-out
printf &quot;-------------------------------------------------------\n&quot;
printf &quot;H0: \t Logistic distribution\n&quot;
printf &quot;H1: \t Burr (skewed) distribution\n&quot;
printf &quot;\n&quot;
printf &quot;Test results (n=%d):\n&quot;, n
printf &quot;LM-BURR = %6.3g (prob= %6.3g)&quot;, lm, p_val
printf &quot;\n-------------------------------------------------------\n&quot;

return RET
</code>
</gretl-function>
<sample-script>
set echo off
set messages off
include logit_burr.gfn
open http://web.uvic.ca/~dgiles/downloads/binary_choice/Logistic_Burr.wf1 --quiet
list ylist = Y
list xlist = X1 X2
matrix CHECK = logit_burr(ylist,xlist)
</sample-script>
</gretl-function-package>
</gretl-functions>

