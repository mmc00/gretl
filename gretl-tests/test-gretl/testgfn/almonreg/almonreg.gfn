<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="almonreg" ID="1423765620" needs-time-series-data="true" minver="1.10.0" lives-in-subdir="true">
<author email="cottrell@wfu.edu">Allin Cottrell</author>
<version>0.4</version>
<date>2015-02-09</date>
<description>PDL (Almon lag) model</description>
<label>Almon lag</label>
<menu-attachment>MAINWIN/Model/TSModels</menu-attachment>
<help>
pdfdoc:almonreg.pdf
</help>
<data-files count="1">
almon.gdt </data-files>
<gretl-function name="almonreg" type="bundle">
 <params count="7">
  <param name="y" type="series">
<description>dependent variable</description>
  </param>
  <param name="x" type="series">
<description>series for PDL</description>
  </param>
  <param name="p" type="int" min="2" default="4">
<description>max lag</description>
  </param>
  <param name="q" type="int" min="2" default="2">
<description>polynomial order</description>
  </param>
  <param name="c" type="bool" default="1">
<description>include a constant</description>
  </param>
  <param name="X" type="list" optional="true">
<description>other regressors</description>
  </param>
  <param name="quiet" type="bool" default="0"/>
 </params>
<code>bundle b
# form the variables z_0 to z_q
loop j=0..q --quiet
  series z_$j = 0
  loop i=0..p --quiet
    z_$j += (i^j) * x(-$i)
  endloop
endloop
if c &amp;&amp; !inlist(X, 0)
  X = const X
endif
# regress the dependent variable on X and the z's and
# retrieve the coefficients as gamma
ols y X z_*
matrix gamma = $coeff
matrix V = $vcv
scalar k = nelem(X)
# recover the constrained betas
beta = get_almon_betas(&amp;gamma, k, p, q)
# and calculate standard errors
matrix J = fdjac(gamma, get_almon_betas(&amp;gamma, k, p, q))
matrix V2 = qform(J, V)
se = sqrt(diag(V2))
matrix res = beta ~ se
b[&quot;gamma&quot;] = gamma
b[&quot;beta&quot;] = beta
b[&quot;se&quot;] = se
b[&quot;xname&quot;] = argname(x)
b[&quot;p&quot;] = p
b[&quot;q&quot;] = q
b[&quot;k&quot;] = k
if !quiet
  almon_print(&amp;b)
endif
return b
</code>
</gretl-function>
<gretl-function name="GUI_almon" type="bundle" pkg-role="gui-main">
 <params count="6">
  <param name="y" type="series">
<description>dependent variable</description>
  </param>
  <param name="x" type="series">
<description>series for PDL</description>
  </param>
  <param name="p" type="int" min="2" default="4">
<description>max lag</description>
  </param>
  <param name="q" type="int" min="2" default="2">
<description>polynomial order</description>
  </param>
  <param name="c" type="bool" default="1">
<description>include a constant</description>
  </param>
  <param name="X" type="list" optional="true">
<description>other regressors</description>
  </param>
 </params>
<code>string yname = argname(y)
string xname = argname(x)
if strlen(yname) &gt; 0
  rename y @yname
else
  yname = &quot;y&quot;
endif
if strlen(xname) &gt; 0
  rename x @xname
else
  xname = &quot;x&quot;
endif
bundle b = almonreg(@yname, @xname, p, q, c, X)
return b
</code>
</gretl-function>
<gretl-function name="almon_print" type="void" pkg-role="bundle-print">
 <params count="1">
  <param name="b" type="bundleref"/>
 </params>
<code>string xname = b[&quot;xname&quot;]
if strlen(xname) == 0
  xname = &quot;x&quot;
endif
scalar k = b[&quot;k&quot;]
scalar p = b[&quot;p&quot;]
scalar q = b[&quot;q&quot;]
string cnames = xname
string tmp
loop i=1..p --quiet
  sprintf tmp &quot;%s(-%d)&quot;, xname, i
  cnames = cnames ~ &quot;,&quot; ~ tmp
endloop
matrix res = b[&quot;beta&quot;] ~ b[&quot;se&quot;]
res = res[k+1:,]
printf &quot;Almon lag, polynomial order %d\n&quot;, q
modprint res cnames
</code>
</gretl-function>
<gretl-function name="get_almon_betas" type="matrix" private="1">
 <params count="4">
  <param name="gamma" type="matrixref"/>
  <param name="k" type="scalar"/>
  <param name="p" type="scalar"/>
  <param name="q" type="scalar"/>
 </params>
<code>scalar gmin = k + 1
matrix beta = zeros(gmin+p,1)
beta[1:k] = gamma[1:k]
loop i=0..p --quiet
  loop j=0..q --quiet
    beta[i+gmin] += gamma[j+gmin] * i^j
  endloop
endloop
return beta
</code>
</gretl-function>
<sample-script>
include almonreg.gfn
open almon.gdt --frompkg=almonreg
genr dummy

list X = dq1 dq2 dq3
scalar p = 5 # maximum lag length
scalar q = 2 # order of Almon polynomial

bundle B = almonreg(ce, ca, p, q, 1, X)
print B
</sample-script>
</gretl-function-package>
</gretl-functions>
